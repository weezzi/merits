package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import java.sql.CallableStatement;
import java.sql.Timestamp;

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.UpdaterDAO;
import com.weezzi.utils.StringUtilities;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.merits.modules.base.uobjects.enums.IdcardType;


/**
 * <b>Title: </b>Wallet Updater Object<br/>
 * <b>Description: </b>Wallet Updater Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
 @SuppressWarnings("unused")
public class WalletsUpdater implements UpdaterDAO {


    // PROPERTIES --------------------------------------------------------------

    private long id;
    private WalletType walletType;
    private IdcardType idcardType;
    private String idcardNumber;
    private String firstName;
    private String lastName;
    private Timestamp birthdate;
    private Long countryOfOrigin;


    // CONSTRUCTORS ------------------------------------------------------------


	/**
	 * Empty Constructor
	 **/
	public WalletsUpdater(long id, WalletType walletType, IdcardType idcardType, String idcardNumber, String firstName, String lastName, Timestamp birthdate, Long countryOfOrigin) {
        this.id = id;
        this.walletType = walletType;
        this.idcardType = idcardType;
        this.idcardNumber = idcardNumber;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthdate = birthdate;
        this.countryOfOrigin = countryOfOrigin;
	}


	// PUBLIC -----------------------------------------------------------------

	
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
	public String getDBConnectionName() {
		return "Merits_Merits";
	}


	/**
	 * Gets update SQL
	 * @return query
	 */
	public String getQuerySQL() {
		return "UPDATE WALLETS " +
               " SET WALLET_TYPE = ? , IDCARD_TYPE = ? , IDCARD_NUMBER = ? , FIRST_NAME = ? , LAST_NAME = ? , BIRTHDATE = ? , COUNTRY_OF_ORIGIN = ?  " +
               " WHERE  ID = ?";
	}
	
	
	/**
	 * Updates Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateFields(CallableStatement statement) throws Exception {
        // Set Fields
        // Check If Null
        if (walletType == null) {
            statement.setNull(1, java.sql.Types.VARCHAR);
        } else {
            statement.setInt(1, walletType.getValue());
        }
        // Check If Null
        if (idcardType == null) {
            statement.setNull(2, java.sql.Types.VARCHAR);
        } else {
            statement.setInt(2, idcardType.getValue());
        }
        // Check If Null
        if (idcardNumber == null) {
            statement.setNull(3, java.sql.Types.VARCHAR);
        } else {
            statement.setString(3, StringUtilities.capString(idcardNumber, 50));
        }
        // Check If Null
        if (firstName == null) {
            statement.setNull(4, java.sql.Types.VARCHAR);
        } else {
            statement.setString(4, StringUtilities.capString(firstName, 100));
        }
        // Check If Null
        if (lastName == null) {
            statement.setNull(5, java.sql.Types.VARCHAR);
        } else {
            statement.setString(5, StringUtilities.capString(lastName, 100));
        }
        // Check If Null
        if (birthdate == null) {
            statement.setNull(6, java.sql.Types.TIMESTAMP);
        } else {
            statement.setTimestamp(6, birthdate);
        }
        // Check If Null
        if (countryOfOrigin == null) {
            statement.setNull(7, java.sql.Types.NUMERIC);
        } else {
            statement.setLong(7, countryOfOrigin);
        }
        statement.setLong(8, id);
	}


	/**
	 * Gets extended update SQL
	 * @return query
	 */
	public String getExtendedQuerySQL() {
		return null;
	}
	
	
	/**
	 * Updates Extended Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateExtendedQueryFields(CallableStatement statement) throws Exception {
	}
	
	
}
