package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import java.sql.CallableStatement;
import java.sql.Timestamp;

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.UpdaterDAO;
import com.weezzi.utils.StringUtilities;
import com.merits.modules.base.uobjects.enums.IdcardType;
import com.weezzi.utils.SecurityUtilities;


/**
 * <b>Title: </b>Volunteer Updater Object<br/>
 * <b>Description: </b>Volunteer Updater Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
 @SuppressWarnings("unused")
public class VolunteersUpdaterByAll implements UpdaterDAO {


    // PROPERTIES --------------------------------------------------------------

    private long id;
    private Long idOrganization;
    private String firstName;
    private String lastName;
    private Image photo;
    private String address;
    private String mobile;
    private Long country;
    private IdcardType idCardType;
    private String cardNumber;
    private String loginEmail;
    private boolean isBlocked;
    private UpdateInfo _updateInfo;


    // CONSTRUCTORS ------------------------------------------------------------


	/**
	 * Empty Constructor
	 **/
	public VolunteersUpdaterByAll(long id, Long idOrganization, String firstName, String lastName, Image photo, String address, String mobile, Long country, IdcardType idCardType, String cardNumber, String loginEmail, boolean isBlocked, UpdateInfo updateInfo) {
        this.id = id;
        this.idOrganization = idOrganization;
        this.firstName = firstName;
        this.lastName = lastName;
        this.photo = photo;
        this.address = address;
        this.mobile = mobile;
        this.country = country;
        this.idCardType = idCardType;
        this.cardNumber = cardNumber;
        this.loginEmail = loginEmail;
        this.isBlocked = isBlocked;
        this._updateInfo = updateInfo;
	}


	// PUBLIC -----------------------------------------------------------------

	
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
	public String getDBConnectionName() {
		return "Merits_Merits";
	}


	/**
	 * Gets update SQL
	 * @return query
	 */
	public String getQuerySQL() {
		return "UPDATE VOLUNTEERS " +
               " SET ID_ORGANIZATION = ? , FIRST_NAME = ? , LAST_NAME = ? , PHOTO = ? , ADDRESS = ? , MOBILE = ? , COUNTRY = ? , ID_CARD_TYPE = ? , CARD_NUMBER = ? , LOGIN_EMAIL = ? , IS_BLOCKED = ? , EDIT_INFO_UPDATE_DATE  = ? , EDIT_INFO_UPDATE_USER  = ?  " +
               " WHERE  ID = ?";
	}
	
	
	/**
	 * Updates Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateFields(CallableStatement statement) throws Exception {
        // Set Fields
        // Check If Null
        if (idOrganization == null) {
            statement.setNull(1, java.sql.Types.NUMERIC);
        } else {
            statement.setLong(1, idOrganization);
        }
        statement.setString(2, StringUtilities.capString(firstName, 50));
        statement.setString(3, StringUtilities.capString(lastName, 50));
        // Check If Null
        if (photo == null) {
            statement.setNull(4, java.sql.Types.VARCHAR);
        } else {
            statement.setString(4, photo.serialize());
        }
        // Check If Null
        if (address == null) {
            statement.setNull(5, java.sql.Types.VARCHAR);
        } else {
            statement.setString(5, StringUtilities.capString(address, 350));
        }
        // Check If Null
        if (mobile == null) {
            statement.setNull(6, java.sql.Types.VARCHAR);
        } else {
            statement.setString(6, StringUtilities.capString(mobile, 50));
        }
        // Check If Null
        if (country == null) {
            statement.setNull(7, java.sql.Types.NUMERIC);
        } else {
            statement.setLong(7, country);
        }
        // Check If Null
        if (idCardType == null) {
            statement.setNull(8, java.sql.Types.VARCHAR);
        } else {
            statement.setInt(8, idCardType.getValue());
        }
        // Check If Null
        if (cardNumber == null) {
            statement.setNull(9, java.sql.Types.VARCHAR);
        } else {
            statement.setString(9, StringUtilities.capString(cardNumber, 25));
        }
        statement.setString(10, SecurityUtilities.encrypt(loginEmail, "VOLUNTEERS", "LOGIN_EMAIL"));
        statement.setBoolean(11, isBlocked);
        // Check if edit info update date is Null
        if (_updateInfo.getUpdateDate() == null) {
            statement.setNull(12, java.sql.Types.TIMESTAMP);
        } else {
            // Set update date
            statement.setTimestamp(12,  _updateInfo.getUpdateDate());
        } 
        // Check if edit info update user is Null
        if (_updateInfo.getUpdateUserId() == null) {
            statement.setNull(13, java.sql.Types.NUMERIC);
        } else {
            // Set update user
            statement.setLong(13, _updateInfo.getUpdateUserId());
        } 
        statement.setLong(14, id);
	}


	/**
	 * Gets extended update SQL
	 * @return query
	 */
	public String getExtendedQuerySQL() {
		return null;
	}
	
	
	/**
	 * Updates Extended Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateExtendedQueryFields(CallableStatement statement) throws Exception {
	}
	
	
}
