package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import java.sql.CallableStatement;
import java.sql.Timestamp;

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.UpdaterDAO;
import com.weezzi.utils.StringUtilities;


/**
 * <b>Title: </b>Sponsor Updater Object<br/>
 * <b>Description: </b>Sponsor Updater Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
 @SuppressWarnings("unused")
public class SponsorsUpdater implements UpdaterDAO {


    // PROPERTIES --------------------------------------------------------------

    private long id;
    private String name;
    private Image photo;
    private String url;
    private EditInfo editInfo;
    private PublishInfo publishInfo;
    private long orderNumber;


    // CONSTRUCTORS ------------------------------------------------------------


	/**
	 * Empty Constructor
	 **/
	public SponsorsUpdater(long id, String name, Image photo, String url, PublishInfo publishInfo, UpdateInfo updateInfo) {
        this.id = id;
        this.name = name;
        this.photo = photo;
        this.url = url;
        this.editInfo = editInfo;
        this.publishInfo = publishInfo;
        this.orderNumber = orderNumber;
	}


	// PUBLIC -----------------------------------------------------------------

	
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
	public String getDBConnectionName() {
		return "Merits_Merits";
	}


	/**
	 * Gets update SQL
	 * @return query
	 */
	public String getQuerySQL() {
		return "UPDATE SPONSORS " +
               " SET NAME = ? , PHOTO = ? , URL = ? , PUBLISH_INFO_DATE  = ? , PUBLISH_INFO_USER  = ? , ORDER_NUMBER = ? , EDIT_INFO_UPDATE_DATE  = ? , EDIT_INFO_UPDATE_USER  = ?  " +
               " WHERE  ID = ?";
	}
	
	
	/**
	 * Updates Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateFields(CallableStatement statement) throws Exception {
        // Set Fields
        statement.setString(1, StringUtilities.capString(name, 100));
        // Check If Null
        if (photo == null) {
            statement.setNull(2, java.sql.Types.VARCHAR);
        } else {
            statement.setString(2, photo.serialize());
        }
        // Check If Null
        if (url == null) {
            statement.setNull(3, java.sql.Types.VARCHAR);
        } else {
            statement.setString(3, StringUtilities.capString(url, 100));
        }
        // Check if edit info create date is Null
        if (editInfo.getCreateDate() == null) {
            statement.setNull(4, java.sql.Types.TIMESTAMP);
        } else {
            // Set create date
            statement.setTimestamp(4,  editInfo.getCreateDate());
        } 
        // Check if edit info create user is Null
        if (editInfo.getCreateUserId() == null) {
            statement.setNull(5, java.sql.Types.NUMERIC);
        } else {
            // Set create user
            statement.setLong(5, editInfo.getCreateUserId());
        } 
        // Check if edit info update date is Null
        if (editInfo.getUpdateDate() == null) {
            statement.setNull(6, java.sql.Types.TIMESTAMP);
        } else {
            // Set update date
            statement.setTimestamp(6,  editInfo.getUpdateDate());
        } 
        // Check if edit info update user is Null
        if (editInfo.getUpdateUserId() == null) {
            statement.setNull(7, java.sql.Types.NUMERIC);
        } else {
            // Set update user
            statement.setLong(7, editInfo.getUpdateUserId());
        } 
        // Check if publish info is null
        if (publishInfo != null) {
            // Check if publish info create date is Null
            if (publishInfo.getPublishDate() == null) {
                statement.setNull(8, java.sql.Types.TIMESTAMP);
            } else {
                // Set publish date
                statement.setTimestamp(8,  publishInfo.getPublishDate());
            } 
            // Check if publish info create user is Null
            if (publishInfo.getPublishUserId() == null) {
                statement.setNull(9, java.sql.Types.NUMERIC);
            } else {
                // Set publish user
                statement.setLong(9, publishInfo.getPublishUserId());
            } 
        } else {
            statement.setNull(8, java.sql.Types.TIMESTAMP);
            statement.setNull(9, java.sql.Types.NUMERIC);
        }
        statement.setLong(10, orderNumber);
        statement.setLong(11, id);
	}


	/**
	 * Gets extended update SQL
	 * @return query
	 */
	public String getExtendedQuerySQL() {
		return null;
	}
	
	
	/**
	 * Updates Extended Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateExtendedQueryFields(CallableStatement statement) throws Exception {
	}
	
	
}
