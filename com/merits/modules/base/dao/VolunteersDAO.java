package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.SingleRecordDAO;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.extras.cache.WeezziCacheObjectType;
import com.weezzi.utils.extras.console.Console;
import com.weezzi.core.dbmanager.dao.DAOParameters;
import com.merits.modules.base.uobjects.enums.IdcardType;
import com.weezzi.utils.SecurityUtilities;


import java.sql.CallableStatement;
import java.sql.ResultSet;



/**
 * <b>Title: </b>Volunteer Data Access Object<br/>
 * <b>Description: </b>Volunteer DAO Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
public class VolunteersDAO extends SingleRecordDAO {


	// CONSTANTS --------------------------------------------------------------

	
	public static final String CACHE_PREFIX = "D3#";
	private static final long serialVersionUID = 1l;


    // MULTI-LANGUAGE ---------------------------------------------------------


    /**
     *  Multi-Language
     */
    public enum MultiLanguageFields {
        ;

        private String column;

        MultiLanguageFields(String column) {
        	this.column = column;
        }

        public String getColumnName() {
        	return column;
        }
	}


    // DATA TYPE ENUMERATION --------------------------------------------------


    /**
     *  DAO Search Type
     */
    public enum SearchType {

    	// Single Record Queries
        Login("Q1"),
        Wallet("Q2"),

		;
    	
        private String cachePrefix;
        
        SearchType(String cachePrefix) {
        	this.cachePrefix = cachePrefix;
        }

        /**
         * Gets cache prefix
         **/
        public String toString() {
        	return cachePrefix;
        }
    }


    // PROPERTIES --------------------------------------------------------------

    // Volunteers Identifier
    private long id;
    // Volunteers Wallet Identifier
    private long idWallet;
    // Volunteers Organization Identifier
    private Long idOrganization;
    // Volunteers First Name
    private String firstName;
    // Volunteers Last Name
    private String lastName;
    // Volunteers Photo
    private Image photo;
    // Volunteers Address
    private String address;
    // Volunteers Mobile
    private String mobile;
    // Volunteers Country
    private Long country;
    // Volunteers Card Type Identifier
    private IdcardType idCardType;
    // Volunteers Card Number
    private String cardNumber;
    // Volunteers Preferred Language
    private String preferredLanguage;
    // Volunteers Login Email
    private String loginEmail;
    // Volunteers Login Password
    private String loginPassword;
    // Volunteers Is Blocked
    private boolean isBlocked;
    // Volunteers Edit Info
    private EditInfo editInfo;


    // CONSTRUCTORS ------------------------------------------------------------


	/**
	 * Empty Constructor
	 **/
	public VolunteersDAO() {
        // Set cache object type
		this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
	}


	/**
	 * Type Constructor
	 **/
	public VolunteersDAO(SearchType type) {
        // Set DAO Search type
        this.setSearchType(type);
        // Set cache object type
		this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
	}
	
	
    /**
     * Volunteer Bean Field Constructor
     * @param id long Volunteers Identifier
     */
    public VolunteersDAO(long id) {
        // Set cache object type
        this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
        // Set Volunteers Identifier
        setId(id);
    }


    /**
     * Volunteer Bean Field Constructor
     * @param id long Volunteers Identifier
     * @param idWallet long Volunteers Wallet Identifier
     * @param firstName String Volunteers First Name
     * @param lastName String Volunteers Last Name
     * @param loginEmail String Volunteers Login Email
     * @param loginPassword String Volunteers Login Password
     * @param isBlocked boolean Volunteers Is Blocked
     * @param editInfo EditInfo Volunteers Edit Info
     */
    public VolunteersDAO(long id, long idWallet, String firstName
                    , String lastName, String loginEmail, String loginPassword
                    , boolean isBlocked, EditInfo editInfo) {
        // Set cache object type
        this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
        // Set Volunteers Identifier
        setId(id);
        // Set Volunteers Wallet Identifier
        setIdWallet(idWallet);
        // Set Volunteers First Name
        setFirstName(firstName);
        // Set Volunteers Last Name
        setLastName(lastName);
        // Set Volunteers Login Email
        setLoginEmail(loginEmail);
        // Set Volunteers Login Password
        setLoginPassword(loginPassword);
        // Set Volunteers Is Blocked
        setIsBlocked(isBlocked);
        // Set Volunteers Edit Info
        setEditInfo(editInfo);
    }


    /**
     * Volunteer Bean Field Constructor
     * @param id long Volunteers Identifier
     * @param idWallet long Volunteers Wallet Identifier
     * @param idOrganization Long Volunteers Organization Identifier
     * @param firstName String Volunteers First Name
     * @param lastName String Volunteers Last Name
     * @param photo Image Volunteers Photo
     * @param address String Volunteers Address
     * @param mobile String Volunteers Mobile
     * @param country Long Volunteers Country
     * @param idCardType IdcardType Volunteers Card Type Identifier
     * @param cardNumber String Volunteers Card Number
     * @param preferredLanguage String Volunteers Preferred Language
     * @param loginEmail String Volunteers Login Email
     * @param loginPassword String Volunteers Login Password
     * @param isBlocked boolean Volunteers Is Blocked
     * @param editInfo EditInfo Volunteers Edit Info
     */
    public VolunteersDAO(long id, long idWallet, Long idOrganization
                    , String firstName, String lastName, Image photo
                    , String address, String mobile, Long country
                    , IdcardType idCardType, String cardNumber, String preferredLanguage
                    , String loginEmail, String loginPassword, boolean isBlocked
                    , EditInfo editInfo) {
        // Set cache object type
        this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
        // Set Volunteers Identifier
        setId(id);
        // Set Volunteers Wallet Identifier
        setIdWallet(idWallet);
        // Set Volunteers Organization Identifier
        setIdOrganization(idOrganization);
        // Set Volunteers First Name
        setFirstName(firstName);
        // Set Volunteers Last Name
        setLastName(lastName);
        // Set Volunteers Photo
        setPhoto(photo);
        // Set Volunteers Address
        setAddress(address);
        // Set Volunteers Mobile
        setMobile(mobile);
        // Set Volunteers Country
        setCountry(country);
        // Set Volunteers Card Type Identifier
        setIdCardType(idCardType);
        // Set Volunteers Card Number
        setCardNumber(cardNumber);
        // Set Volunteers Preferred Language
        setPreferredLanguage(preferredLanguage);
        // Set Volunteers Login Email
        setLoginEmail(loginEmail);
        // Set Volunteers Login Password
        setLoginPassword(loginPassword);
        // Set Volunteers Is Blocked
        setIsBlocked(isBlocked);
        // Set Volunteers Edit Info
        setEditInfo(editInfo);
    }


    

    
    // TYPE -------------------------------------------------------------------

    
    /**
     * Sets DAO search type
     * @param type
     */
    public void setSearchType(SearchType type) {
    	// Sets DAO type
    	super.setSearchType(type);
    }


	// GETTERS -----------------------------------------------------------------


    /**
     * Get Volunteers Identifier
     * @return long Volunteers Identifier
     */
    public long getId() {
        return this.id;
    }


    /**
     * Get Volunteers Wallet Identifier
     * @return long Volunteers Wallet Identifier
     */
    public long getIdWallet() {
        return this.idWallet;
    }


    /**
     * Get Volunteers Organization Identifier
     * @return Long Volunteers Organization Identifier
     */
    public Long getIdOrganization() {
        return this.idOrganization;
    }


    /**
     * Get Volunteers First Name
     * @return String Volunteers First Name
     */
    public String getFirstName() {
        return this.firstName;
    }


    /**
     * Get Volunteers Last Name
     * @return String Volunteers Last Name
     */
    public String getLastName() {
        return this.lastName;
    }


    /**
     * Get Volunteers Photo
     * @return Image Volunteers Photo
     */
    public Image getPhoto() {
        return this.photo;
    }


    /**
     * Get Volunteers Address
     * @return String Volunteers Address
     */
    public String getAddress() {
        return this.address;
    }


    /**
     * Get Volunteers Mobile
     * @return String Volunteers Mobile
     */
    public String getMobile() {
        return this.mobile;
    }


    /**
     * Get Volunteers Country
     * @return Long Volunteers Country
     */
    public Long getCountry() {
        return this.country;
    }


    /**
     * Get Volunteers Card Type Identifier
     * @return IdcardType Volunteers Card Type Identifier
     */
    public IdcardType getIdCardType() {
        return this.idCardType;
    }


    /**
     * Get Volunteers Card Number
     * @return String Volunteers Card Number
     */
    public String getCardNumber() {
        return this.cardNumber;
    }


    /**
     * Get Volunteers Preferred Language
     * @return String Volunteers Preferred Language
     */
    public String getPreferredLanguage() {
        return this.preferredLanguage;
    }


    /**
     * Get Volunteers Login Email
     * @return String Volunteers Login Email
     */
    public String getLoginEmail() {
        return this.loginEmail;
    }


    /**
     * Get Volunteers Login Password
     * @return String Volunteers Login Password
     */
    public String getLoginPassword() {
        return this.loginPassword;
    }


    /**
     * Get Volunteers Is Blocked
     * @return boolean Volunteers Is Blocked
     */
    public boolean getIsBlocked() {
        return this.isBlocked;
    }


    /**
     * Get Volunteers Edit Info
     * @return EditInfo Volunteers Edit Info
     */
    public EditInfo getEditInfo() {
        return this.editInfo;
    }



	// SETTERS -----------------------------------------------------------------


    /**
     * Set Volunteers Identifier
     * @param id long Volunteers Identifier
     */
    public void setId(long id) {
        this.id = id;
    }


    /**
     * Set Volunteers Wallet Identifier
     * @param idWallet long Volunteers Wallet Identifier
     */
    public void setIdWallet(long idWallet) {
        this.idWallet = idWallet;
    }


    /**
     * Set Volunteers Organization Identifier
     * @param idOrganization Long Volunteers Organization Identifier
     */
    public void setIdOrganization(Long idOrganization) {
        this.idOrganization = idOrganization;
    }


    /**
     * Set Volunteers First Name
     * @param firstName String Volunteers First Name
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }


    /**
     * Set Volunteers Last Name
     * @param lastName String Volunteers Last Name
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }


    /**
     * Set Volunteers Photo
     * @param photo Image Volunteers Photo
     */
    public void setPhoto(Image photo) {
        this.photo = photo;
    }


    /**
     * Set Volunteers Address
     * @param address String Volunteers Address
     */
    public void setAddress(String address) {
        this.address = address;
    }


    /**
     * Set Volunteers Mobile
     * @param mobile String Volunteers Mobile
     */
    public void setMobile(String mobile) {
        this.mobile = mobile;
    }


    /**
     * Set Volunteers Country
     * @param country Long Volunteers Country
     */
    public void setCountry(Long country) {
        this.country = country;
    }


    /**
     * Set Volunteers Card Type Identifier
     * @param idCardType IdcardType Volunteers Card Type Identifier
     */
    public void setIdCardType(IdcardType idCardType) {
        this.idCardType = idCardType;
    }


    /**
     * Set Volunteers Card Number
     * @param cardNumber String Volunteers Card Number
     */
    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }


    /**
     * Set Volunteers Preferred Language
     * @param preferredLanguage String Volunteers Preferred Language
     */
    public void setPreferredLanguage(String preferredLanguage) {
        this.preferredLanguage = preferredLanguage;
    }


    /**
     * Set Volunteers Login Email
     * @param loginEmail String Volunteers Login Email
     */
    public void setLoginEmail(String loginEmail) {
        this.loginEmail = loginEmail;
    }


    /**
     * Set Volunteers Login Password
     * @param loginPassword String Volunteers Login Password
     */
    public void setLoginPassword(String loginPassword) {
        this.loginPassword = loginPassword;
    }


    /**
     * Set Volunteers Is Blocked
     * @param isBlocked boolean Volunteers Is Blocked
     */
    public void setIsBlocked(boolean isBlocked) {
        this.isBlocked = isBlocked;
    }


    /**
     * Set Volunteers Edit Info
     * @param editInfo EditInfo Volunteers Edit Info
     */
    public void setEditInfo(EditInfo editInfo) {
        this.editInfo = editInfo;
    }



    // MULTI-LANGUAGE ---------------------------------------------------------



	// DAO ID -----------------------------------------------------------------

    
    /**
     * Checks if has Id Field
     */
    public boolean hasIdField() {
    	return true;
    }

    
    /**
     * Sets Id
     * @param id
     */
    public void setId(Long id) {
        this.id = id;
    }


    // CACHING ----------------------------------------------------------------
    
    
	/**
	 * Gets cachePrefix
	 * @return The cachePrefix of this object
	 */
	public String getCachePrefix() {
		return CACHE_PREFIX;
	}
	
	
	/**
	 * Gets the object cache keys
	 * @return cacheKeys
	 */
	public String[] getCacheKeys() {
		if (getParameters() != null) {
			return getParameters().getCacheKeys();
		}
		return null;
	}
	

    // DATABASE MANAGER SPECIFIC ----------------------------------------------

    
    /**
     * Gets table name
     */
    public String getTableName() {
    	return "VOLUNTEERS";
    }

    
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
    public String getDBConnectionName() {
    	return "Merits_Merits";
    }

    
    /**
     * Gets Insert query SQL
     * @return Insert SQL
     */
    public String getInsertSQL() {
    	// SQL
    	return "INSERT INTO VOLUNTEERS (`ID_WALLET`, `ID_ORGANIZATION`, `FIRST_NAME`, `LAST_NAME`, `PHOTO`, `ADDRESS`, `MOBILE`, `COUNTRY`, `ID_CARD_TYPE`, `CARD_NUMBER`, `PREFERRED_LANGUAGE`, `LOGIN_EMAIL`, `LOGIN_PASSWORD`, `IS_BLOCKED`, `EDIT_INFO_CREATE_DATE`, `EDIT_INFO_CREATE_USER`, `EDIT_INFO_UPDATE_DATE`, `EDIT_INFO_UPDATE_USER`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    }

    
    /**
     * Gets Insert procedure
     */
    public String getInsertProcedureName() {
    	return "VOLUNTEERS_PROC(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    }


	// RESULTSETS & STATEMENTS ------------------------------------------------
	    
    
    /**
     * Fills insert fields
     * @param statement
     */
    public void fillStatementFieldsForInsert(CallableStatement statement) throws Exception {
        // Set Volunteers Wallet Identifier
        statement.setLong(1, idWallet);
        // Check If Volunteers Organization Identifier Is Null
        if (idOrganization == null) {
            statement.setNull(2, java.sql.Types.NUMERIC);
        } else {
            // Set Volunteers Organization Identifier
            statement.setLong(2, idOrganization);
        }
        // Set Volunteers First Name
        statement.setString(3, StringUtilities.capString(firstName,50));
        // Set Volunteers Last Name
        statement.setString(4, StringUtilities.capString(lastName,50));
        // Check If Null
        if (photo == null) {
            statement.setNull(5, java.sql.Types.VARCHAR);
        } else {
            statement.setString(5, photo.serialize());
        }
        // Check If Volunteers Address Is Null
        if (address == null) {
            statement.setNull(6, java.sql.Types.VARCHAR);
        } else {
            // Set Volunteers Address
            statement.setString(6, StringUtilities.capString(address,350));
        }
        // Check If Volunteers Mobile Is Null
        if (mobile == null) {
            statement.setNull(7, java.sql.Types.VARCHAR);
        } else {
            // Set Volunteers Mobile
            statement.setString(7, StringUtilities.capString(mobile,50));
        }
        // Check If Volunteers Country Is Null
        if (country == null) {
            statement.setNull(8, java.sql.Types.NUMERIC);
        } else {
            // Set Volunteers Country
            statement.setLong(8, country);
        }
        // Check If Volunteers Card Type Identifier Is Null
        if (idCardType == null) {
            statement.setNull(9, java.sql.Types.VARCHAR);
        } else {
            // Set Volunteers Card Type Identifier
            statement.setInt(9, idCardType.getValue());
        }
        // Check If Volunteers Card Number Is Null
        if (cardNumber == null) {
            statement.setNull(10, java.sql.Types.VARCHAR);
        } else {
            // Set Volunteers Card Number
            statement.setString(10, StringUtilities.capString(cardNumber,25));
        }
        // Check If Volunteers Preferred Language Is Null
        if (preferredLanguage == null) {
            statement.setNull(11, java.sql.Types.VARCHAR);
        } else {
            // Set Volunteers Preferred Language
            statement.setString(11, StringUtilities.capString(preferredLanguage,3));
        }
        // Set Volunteers Login Email (dummy value for later update)
        statement.setString(12, "-");
        // Set Volunteers Login Password (dummy value for later update)
        statement.setString(13, "-");
        // Set Volunteers Is Blocked
        statement.setBoolean(14, isBlocked);
        // Check if edit info create date is Null
        if (editInfo.getCreateDate() == null) {
            statement.setNull(15, java.sql.Types.TIMESTAMP);
        } else {
            // Set create date
            statement.setTimestamp(15, editInfo.getCreateDate());
        } 
        // Check if edit info create user is Null
        if (editInfo.getCreateUserId() == null) {
            statement.setNull(16, java.sql.Types.NUMERIC);
        } else {
            // Set create user
            statement.setLong(16, editInfo.getCreateUserId());
        } 
        // Check if edit info update date is Null
        if (editInfo.getUpdateDate() == null) {
            statement.setNull(17, java.sql.Types.TIMESTAMP);
        } else {
            // Set update date
            statement.setTimestamp(17, editInfo.getUpdateDate());
        } 
        // Check if edit info update user is Null
        if (editInfo.getUpdateUserId() == null) {
            statement.setNull(18, java.sql.Types.NUMERIC);
        } else {
            // Set update user
            statement.setLong(18, editInfo.getUpdateUserId());
        } 
    }


    /**
     * Sets DAO values from a resultset 
     * @param resultset
     */
    public void fillValuesFromResultSet(ResultSet resultset) throws Exception {
        // Set Volunteers Identifier
        this.setId(resultset.getLong("ID"));
        // Set Volunteers Wallet Identifier
        this.setIdWallet(resultset.getLong("ID_WALLET"));
        // Set Volunteers Organization Identifier
        this.setIdOrganization(getRSLong(resultset, "ID_ORGANIZATION"));
        // Set Volunteers First Name
        this.setFirstName(resultset.getString("FIRST_NAME"));
        // Set Volunteers Last Name
        this.setLastName(resultset.getString("LAST_NAME"));
        // Set Volunteers Photo
        this.setPhoto(Image.deserialize(resultset.getString("PHOTO")));
        // Set Volunteers Address
        this.setAddress(resultset.getString("ADDRESS"));
        // Check if was null
        if (resultset.wasNull()) {
            this.setAddress(null);
        }
        // Set Volunteers Mobile
        this.setMobile(resultset.getString("MOBILE"));
        // Check if was null
        if (resultset.wasNull()) {
            this.setMobile(null);
        }
        // Set Volunteers Country
        this.setCountry(getRSLong(resultset, "COUNTRY"));
        // Set Volunteers Card Type Identifier
        this.setIdCardType(IdcardType.getByValue(resultset.getInt("ID_CARD_TYPE")));
        // Check if was null
        if (resultset.wasNull()) {
            this.setIdCardType(null);
        }
        // Set Volunteers Card Number
        this.setCardNumber(resultset.getString("CARD_NUMBER"));
        // Check if was null
        if (resultset.wasNull()) {
            this.setCardNumber(null);
        }
        // Set Volunteers Preferred Language
        this.setPreferredLanguage(resultset.getString("PREFERRED_LANGUAGE"));
        // Check if was null
        if (resultset.wasNull()) {
            this.setPreferredLanguage(null);
        }
        // Set Volunteers Login Email
        this.setLoginEmail(SecurityUtilities.decrypt(resultset.getString("LOGIN_EMAIL"), "VOLUNTEERS", "LOGIN_EMAIL"));
        // Set Volunteers Login Password
        this.setLoginPassword(SecurityUtilities.decryptSalted(resultset.getString("LOGIN_PASSWORD"), "VOLUNTEERS", "LOGIN_PASSWORD", this.getId()));
        // Set Volunteers Is Blocked
        this.setIsBlocked(resultset.getBoolean("IS_BLOCKED"));
        // Set Volunteers Edit Info
        this.editInfo = new EditInfo();
        editInfo.setCreateDate(resultset.getTimestamp("EDIT_INFO_CREATE_DATE"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setCreateDate(null);
        }
        editInfo.setCreateUserId(resultset.getLong("EDIT_INFO_CREATE_USER"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setCreateUserId(null);
        }
        editInfo.setUpdateDate(resultset.getTimestamp("EDIT_INFO_UPDATE_DATE"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setUpdateDate(null);
        }
        editInfo.setUpdateUserId(resultset.getLong("EDIT_INFO_UPDATE_USER"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setUpdateUserId(null);
        }
    }



	// ENCRYPTION METHODS -----------------------------------------------------


	/**
	 * Checks if has encryption
	 * @return
	 */
	public boolean hasEncryption() {
    	return true;
    }

    
    /**
     * Gets Encryption Update SQL
     * @return
     */
	public String getEncryptionUpdateSQL() {
        return "UPDATE VOLUNTEERS " +
               " SET LOGIN_EMAIL = ? , LOGIN_PASSWORD = ?  " +
               " WHERE ID = ?";
	}


    /**
     * Updates the encryption columns
     * @param statement
     * @param rowId
     */
    public void updateEncryptionColumns(CallableStatement statement, long rowId) throws Exception {
        // Set Fields
        statement.setString(1, SecurityUtilities.encrypt(loginEmail, "VOLUNTEERS", "LOGIN_EMAIL"));
        statement.setString(2, SecurityUtilities.encryptSalted(loginPassword, "VOLUNTEERS", "LOGIN_PASSWORD", rowId));
        statement.setLong(3, rowId);
    }


    /**
     * Gets a encrypted value for the loginEmail field
     * @param loginEmail
     * @return
     * @throws Exception
     */
    public static String getEncryptedLoginEmail(String loginEmail) throws Exception {
        return SecurityUtilities.encrypt(loginEmail, "VOLUNTEERS", "LOGIN_EMAIL");
    }


    /**
     * Gets a encrypted value for the loginPassword field
     * @param loginPassword
     * @param salt
     * @return
     * @throws Exception
     */
    public static String getEncryptedLoginPassword(String loginPassword, long salt) throws Exception {
        return SecurityUtilities.encrypt(loginPassword, "VOLUNTEERS", "LOGIN_PASSWORD", salt);
    }
    
    // ------------------------------------------------------------------------
    // PARAMETERS CLASSES -----------------------------------------------------
    // ------------------------------------------------------------------------



	// Login Parameters Class -----------------------------------------------


	/**
	 * Login
	 */
	public class LoginParameters extends DAOParameters {

		
		// Properties .........................................................

		
        // Volunteers Login Email
        private String loginEmail;
        

		// Constructors .......................................................

		
		public LoginParameters(String loginEmail) {
            this.loginEmail = loginEmail;
		}


        // DAO Parameters .....................................................


        /**
         * Gets the search fields
         * @return
         */
		public Object[] getSearchFields() {
			// Local Variables
			return new Object[] {loginEmail};
		}
	
	
		/**
		 * Gets the object cache keys
		 * @return cacheKeys
		 */
		public String[] getCacheKeys() {
			return null;
		}

		
	}


	// Wallet Parameters Class -----------------------------------------------


	/**
	 * Wallet
	 */
	public class WalletParameters extends DAOParameters {

		
		// Properties .........................................................

		
        // Volunteers Wallet Identifier
        private long idWallet;
        

		// Constructors .......................................................

		
		public WalletParameters(long idWallet) {
            this.idWallet = idWallet;
		}


        // DAO Parameters .....................................................


        /**
         * Gets the search fields
         * @return
         */
		public Object[] getSearchFields() {
			// Local Variables
			return new Object[] {idWallet};
		}
	
	
		/**
		 * Gets the object cache keys
		 * @return cacheKeys
		 */
		public String[] getCacheKeys() {
			return null;
		}

		
	}

}
