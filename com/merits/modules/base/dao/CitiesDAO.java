package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.SingleRecordDAO;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.extras.cache.WeezziCacheObjectType;
import com.weezzi.utils.extras.console.Console;


import java.sql.CallableStatement;
import java.sql.ResultSet;



/**
 * <b>Title: </b>City Data Access Object<br/>
 * <b>Description: </b>City DAO Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
public class CitiesDAO extends SingleRecordDAO {


	// CONSTANTS --------------------------------------------------------------

	
	public static final String CACHE_PREFIX = "D13#";
	private static final long serialVersionUID = 1l;


    // MULTI-LANGUAGE ---------------------------------------------------------


    /**
     *  Multi-Language
     */
    public enum MultiLanguageFields {
        ;

        private String column;

        MultiLanguageFields(String column) {
        	this.column = column;
        }

        public String getColumnName() {
        	return column;
        }
	}


    // DATA TYPE ENUMERATION --------------------------------------------------


    /**
     *  DAO Search Type
     */
    public enum SearchType {

    	// Single Record Queries

		;
    	
        private String cachePrefix;
        
        SearchType(String cachePrefix) {
        	this.cachePrefix = cachePrefix;
        }

        /**
         * Gets cache prefix
         **/
        public String toString() {
        	return cachePrefix;
        }
    }


    // PROPERTIES --------------------------------------------------------------

    // Cities Identifier
    private long id;
    // Cities Country Identifier
    private long idCountry;
    // Cities Name
    private String name;
    // Cities Geo Location
    private GeoLocation geoLocation;
    // Cities Edit Info
    private EditInfo editInfo;
    // Cities Publish Info
    private PublishInfo publishInfo;


    // CONSTRUCTORS ------------------------------------------------------------


	/**
	 * Empty Constructor
	 **/
	public CitiesDAO() {
        // Set cache object type
		this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
	}


	/**
	 * Type Constructor
	 **/
	public CitiesDAO(SearchType type) {
        // Set DAO Search type
        this.setSearchType(type);
        // Set cache object type
		this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
	}
	
	
    /**
     * City Bean Field Constructor
     * @param id long Cities Identifier
     */
    public CitiesDAO(long id) {
        // Set cache object type
        this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
        // Set Cities Identifier
        setId(id);
    }


    /**
     * City Bean Field Constructor
     * @param id long Cities Identifier
     * @param idCountry long Cities Country Identifier
     * @param name String Cities Name
     * @param editInfo EditInfo Cities Edit Info
     * @param publishInfo PublishInfo Cities Publish Info
     */
    public CitiesDAO(long id, long idCountry, String name
                    , EditInfo editInfo, PublishInfo publishInfo) {
        // Set cache object type
        this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
        // Set Cities Identifier
        setId(id);
        // Set Cities Country Identifier
        setIdCountry(idCountry);
        // Set Cities Name
        setName(name);
        // Set Cities Edit Info
        setEditInfo(editInfo);
        // Set Cities Publish Info
        setPublishInfo(publishInfo);
    }


    /**
     * City Bean Field Constructor
     * @param id long Cities Identifier
     * @param idCountry long Cities Country Identifier
     * @param name String Cities Name
     * @param geoLocation GeoLocation Cities Geo Location
     * @param editInfo EditInfo Cities Edit Info
     * @param publishInfo PublishInfo Cities Publish Info
     */
    public CitiesDAO(long id, long idCountry, String name
                    , GeoLocation geoLocation, EditInfo editInfo, PublishInfo publishInfo) {
        // Set cache object type
        this.setCacheObjectType(WeezziCacheObjectType.SingleRecord);
        // Set Cities Identifier
        setId(id);
        // Set Cities Country Identifier
        setIdCountry(idCountry);
        // Set Cities Name
        setName(name);
        // Set Cities Geo Location
        setGeoLocation(geoLocation);
        // Set Cities Edit Info
        setEditInfo(editInfo);
        // Set Cities Publish Info
        setPublishInfo(publishInfo);
    }


    

    
    // TYPE -------------------------------------------------------------------

    
    /**
     * Sets DAO search type
     * @param type
     */
    public void setSearchType(SearchType type) {
    	// Sets DAO type
    	super.setSearchType(type);
    }


	// GETTERS -----------------------------------------------------------------


    /**
     * Get Cities Identifier
     * @return long Cities Identifier
     */
    public long getId() {
        return this.id;
    }


    /**
     * Get Cities Country Identifier
     * @return long Cities Country Identifier
     */
    public long getIdCountry() {
        return this.idCountry;
    }


    /**
     * Get Cities Name
     * @return String Cities Name
     */
    public String getName() {
        return this.name;
    }


    /**
     * Get Cities Geo Location
     * @return GeoLocation Cities Geo Location
     */
    public GeoLocation getGeoLocation() {
        return this.geoLocation;
    }


    /**
     * Get Cities Edit Info
     * @return EditInfo Cities Edit Info
     */
    public EditInfo getEditInfo() {
        return this.editInfo;
    }


    /**
     * Get Cities Publish Info
     * @return PublishInfo Cities Publish Info
     */
    public PublishInfo getPublishInfo() {
        return this.publishInfo;
    }



	// SETTERS -----------------------------------------------------------------


    /**
     * Set Cities Identifier
     * @param id long Cities Identifier
     */
    public void setId(long id) {
        this.id = id;
    }


    /**
     * Set Cities Country Identifier
     * @param idCountry long Cities Country Identifier
     */
    public void setIdCountry(long idCountry) {
        this.idCountry = idCountry;
    }


    /**
     * Set Cities Name
     * @param name String Cities Name
     */
    public void setName(String name) {
        this.name = name;
    }


    /**
     * Set Cities Geo Location
     * @param geoLocation GeoLocation Cities Geo Location
     */
    public void setGeoLocation(GeoLocation geoLocation) {
        this.geoLocation = geoLocation;
    }


    /**
     * Set Cities Edit Info
     * @param editInfo EditInfo Cities Edit Info
     */
    public void setEditInfo(EditInfo editInfo) {
        this.editInfo = editInfo;
    }


    /**
     * Set Cities Publish Info
     * @param publishInfo PublishInfo Cities Publish Info
     */
    public void setPublishInfo(PublishInfo publishInfo) {
        this.publishInfo = publishInfo;
    }



    // MULTI-LANGUAGE ---------------------------------------------------------



	// DAO ID -----------------------------------------------------------------

    
    /**
     * Checks if has Id Field
     */
    public boolean hasIdField() {
    	return true;
    }

    
    /**
     * Sets Id
     * @param id
     */
    public void setId(Long id) {
        this.id = id;
    }


    // CACHING ----------------------------------------------------------------
    
    
	/**
	 * Gets cachePrefix
	 * @return The cachePrefix of this object
	 */
	public String getCachePrefix() {
		return CACHE_PREFIX;
	}
	
	
	/**
	 * Gets the object cache keys
	 * @return cacheKeys
	 */
	public String[] getCacheKeys() {
		if (getParameters() != null) {
			return getParameters().getCacheKeys();
		}
		return null;
	}
	

    // DATABASE MANAGER SPECIFIC ----------------------------------------------

    
    /**
     * Gets table name
     */
    public String getTableName() {
    	return "CITIES";
    }

    
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
    public String getDBConnectionName() {
    	return "Merits_Merits";
    }

    
    /**
     * Gets Insert query SQL
     * @return Insert SQL
     */
    public String getInsertSQL() {
    	// SQL
    	return "INSERT INTO CITIES (`ID_COUNTRY`, `NAME`, `GEO_LOCATION_COUNTRY`, `GEO_LOCATION_REGION`, `GEO_LOCATION_CITY`, `GEO_LOCATION_LAT`, `GEO_LOCATION_LONG`, `EDIT_INFO_CREATE_DATE`, `EDIT_INFO_CREATE_USER`, `EDIT_INFO_UPDATE_DATE`, `EDIT_INFO_UPDATE_USER`, `PUBLISH_INFO_DATE`, `PUBLISH_INFO_USER`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    }

    
    /**
     * Gets Insert procedure
     */
    public String getInsertProcedureName() {
    	return "CITIES_PROC(?, ?, ?, ?, ?, ?)";
    }


	// RESULTSETS & STATEMENTS ------------------------------------------------
	    
    
    /**
     * Fills insert fields
     * @param statement
     */
    public void fillStatementFieldsForInsert(CallableStatement statement) throws Exception {
        // Set Cities Country Identifier
        statement.setLong(1, idCountry);
        // Set Cities Name
        statement.setString(2, StringUtilities.capString(name,100));
        // Check if location is not null
        if (geoLocation != null) {
            // Country
            if (geoLocation.getCountryId() != null) {
                statement.setLong(3, geoLocation.getCountryId());
            } else {
                statement.setNull(3, java.sql.Types.INTEGER);
            }
            // Region
            if (geoLocation.getRegionId() != null) {
                statement.setLong(4, geoLocation.getRegionId());
            } else {
                statement.setNull(4, java.sql.Types.INTEGER);
            }
            // City
            if (geoLocation.getCityId() != null) {
                statement.setLong(5, geoLocation.getCityId());
            } else {
                statement.setNull(5, java.sql.Types.INTEGER);
            }
            // Latitude
            if (geoLocation.getLatitude() != null) {
                statement.setFloat(6, geoLocation.getLatitude());
            } else {
                statement.setNull(6, java.sql.Types.INTEGER);
            }
            // Longitude
            if (geoLocation.getLongitude() != null) {
                statement.setFloat(7, geoLocation.getLongitude());
            } else {
                statement.setNull(7, java.sql.Types.INTEGER);
            }
        } else {
            // Set country id
            statement.setNull(3, java.sql.Types.INTEGER);
            // Set region
            statement.setNull(4, java.sql.Types.INTEGER);
            // Set city
            statement.setNull(5, java.sql.Types.INTEGER);
            // Set latitude
            statement.setNull(6, java.sql.Types.INTEGER);
            // Set longitude
            statement.setNull(7, java.sql.Types.INTEGER);
        }
        // Check if edit info create date is Null
        if (editInfo.getCreateDate() == null) {
            statement.setNull(8, java.sql.Types.TIMESTAMP);
        } else {
            // Set create date
            statement.setTimestamp(8, editInfo.getCreateDate());
        } 
        // Check if edit info create user is Null
        if (editInfo.getCreateUserId() == null) {
            statement.setNull(9, java.sql.Types.NUMERIC);
        } else {
            // Set create user
            statement.setLong(9, editInfo.getCreateUserId());
        } 
        // Check if edit info update date is Null
        if (editInfo.getUpdateDate() == null) {
            statement.setNull(10, java.sql.Types.TIMESTAMP);
        } else {
            // Set update date
            statement.setTimestamp(10, editInfo.getUpdateDate());
        } 
        // Check if edit info update user is Null
        if (editInfo.getUpdateUserId() == null) {
            statement.setNull(11, java.sql.Types.NUMERIC);
        } else {
            // Set update user
            statement.setLong(11, editInfo.getUpdateUserId());
        } 
        // Check if publish info is not null
        if (publishInfo != null) {
            // Check if publish info create date is Null
            if (publishInfo.getPublishDate() == null) {
                statement.setNull(12, java.sql.Types.TIMESTAMP);
            } else {
                // Set publish date
                statement.setTimestamp(12, publishInfo.getPublishDate());
            } 
            // Check if publish info create user is Null
                if (publishInfo.getPublishUserId() == null) {
                statement.setNull(13, java.sql.Types.NUMERIC);
            } else {
                // Set publish user
                statement.setLong(13, publishInfo.getPublishUserId());
            } 
        } else {
            statement.setNull(12, java.sql.Types.TIMESTAMP);
            statement.setNull(13, java.sql.Types.NUMERIC);
        }
    }


    /**
     * Sets DAO values from a resultset 
     * @param resultset
     */
    public void fillValuesFromResultSet(ResultSet resultset) throws Exception {
        // Set Cities Identifier
        this.setId(resultset.getLong("ID"));
        // Set Cities Country Identifier
        this.setIdCountry(resultset.getLong("ID_COUNTRY"));
        // Set Cities Name
        this.setName(resultset.getString("NAME"));
        // Set Cities Geo Location
        this.geoLocation = new GeoLocation();
        this.geoLocation.setCountryId(resultset.getLong("GEO_LOCATION_COUNTRY"));
        // Check if was null
        if (resultset.wasNull()) {
            this.geoLocation.setCountryId(null);
        }
        this.geoLocation.setRegionId(resultset.getLong("GEO_LOCATION_REGION"));
        // Check if was null
        if (resultset.wasNull()) {
            this.geoLocation.setRegionId(null);
        }
        this.geoLocation.setCityId(resultset.getLong("GEO_LOCATION_CITY"));
        // Check if was null
        if (resultset.wasNull()) {
            this.geoLocation.setCityId(null);
        }
        this.geoLocation.setLatitude(resultset.getFloat("GEO_LOCATION_LAT"));
        // Check if was null
        if (resultset.wasNull()) {
            this.geoLocation.setLatitude(null);
        }
        this.geoLocation.setLongitude(resultset.getFloat("GEO_LOCATION_LONG"));
        // Check if was null
        if (resultset.wasNull()) {
            this.geoLocation.setLongitude(null);
        }
        // Set Cities Edit Info
        this.editInfo = new EditInfo();
        editInfo.setCreateDate(resultset.getTimestamp("EDIT_INFO_CREATE_DATE"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setCreateDate(null);
        }
        editInfo.setCreateUserId(resultset.getLong("EDIT_INFO_CREATE_USER"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setCreateUserId(null);
        }
        editInfo.setUpdateDate(resultset.getTimestamp("EDIT_INFO_UPDATE_DATE"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setUpdateDate(null);
        }
        editInfo.setUpdateUserId(resultset.getLong("EDIT_INFO_UPDATE_USER"));
        // Check if was null
        if (resultset.wasNull()) {
            editInfo.setUpdateUserId(null);
        }
        // Set Cities Publish Info
        this.publishInfo = new PublishInfo();
        publishInfo.setPublishDate(resultset.getTimestamp("PUBLISH_INFO_DATE"));
        // Check if was null
        if (resultset.wasNull()) {
            publishInfo.setPublishDate(null);
        }
        publishInfo.setPublishUserId(resultset.getLong("PUBLISH_INFO_USER"));
        // Check if was null
        if (resultset.wasNull()) {
            publishInfo.setPublishUserId(null);
        }
    }

    
    // ------------------------------------------------------------------------
    // PARAMETERS CLASSES -----------------------------------------------------
    // ------------------------------------------------------------------------


}
