package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.BulkDAO;
import com.weezzi.core.dbmanager.dao.DAOParameters;
import com.weezzi.utils.extras.cache.WeezziCacheObjectType;
import com.merits.modules.base.dao.WalletsDAO;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.merits.modules.base.uobjects.enums.IdcardType;

import java.util.Vector;
import java.sql.ResultSet;
import java.util.Collection;


/**
 * <b>Title: </b>Wallet Bulk Data Transfer Object<br/>
 * <b>Description: </b>Wallet Bulk DTO Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class BulkWalletsDAO extends BulkDAO {


	// CONSTANTS ---------------------------------------------------------------

	
	public static final String CACHE_PREFIX = "B0#";
	private static final long serialVersionUID = 1L;


    // DATA TYPE ENUMERATION --------------------------------------------------


    /**
     *  DAO Search Type
     */
    public enum SearchType {

    	// Single Record Queries

		;
    	
        private String cachePrefix;
        
        SearchType(String cachePrefix) {
        	this.cachePrefix = cachePrefix;
        }

        /**
         * Gets cache prefix
         **/
        public String toString() {
        	return cachePrefix;
        }
    }


    // PROPERTIES --------------------------------------------------------------


    // Wallet Bulk DTO Data Vector
    public Vector<WalletsDAO> data;


    // CONSTRUCTORS ------------------------------------------------------------


    /**
     * Bulk DTO Search Constructor
     * @param type Type Bulk DAO Query Type
     */
    public BulkWalletsDAO(SearchType searchType) {
        // Set Cache Object Type
        this.setCacheObjectType(WeezziCacheObjectType.Query);
        // Set Bulk DAO search type
        this.setSearchType(searchType);
        this.data = new Vector<WalletsDAO>();
    }


    // PUBLIC ------------------------------------------------------------------


    /**
     * Adds a Wallet DAO to the data
     * @param wallets WalletsDAO Wallet DAO
     */
    public void add(WalletsDAO wallets) {
        // Adds Wallet
        data.add(wallets);
    }


    /**
     * Adds a Wallet from a recordset
     * @param rs ResultSet
     * @throws Exception
     */
    public void add(ResultSet rs) throws Exception {
    	// Local Variables
    	WalletsDAO dto;
    	// Create DTO
    	dto = new WalletsDAO();
    	// Fill DTO values
    	dto.fillValuesFromResultSet(rs);
        this.add(dto);
    }


    /**
     * Adds a collection of Wallet DTO to the list
     * @param Collection Wallet DTO Collection
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public void add(Collection collection) {
        // Adds all collection data
        data.addAll(collection);
    }


    // GETTERS -----------------------------------------------------------------


    /**
     * Gets all Bulk DTO Data
     * @return Vector
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public Vector getAllData() {
        return data;
    }


    /**
     * Gets a particular Wallet DTO
     * @param index int Wallet index
     * @return WalletsDAO Wallet data transfer data object
     */
    public WalletsDAO get(int index) {
        // Gets one Wallet from the bulk data
        return data.get(index);
    }


    /**
     * Gets all data as an array
     * @return WalletsDAO[] Wallet DTO array
     */
    public WalletsDAO[] getArray() {
        // Local variables
        WalletsDAO[] array = new WalletsDAO[data.size()];
        // Fill Array
        for (int i=0; i<data.size(); i++) {
            // Fill array value
            array[i] = this.get(i);
        }
        // Return array
        return array;
    }


    /**
     * Gets bulk set data size
     * @return int
     */
    public int getBulkSize() {
        return data.size();
    }


    /**
     * Resets all data in the Bulk DTO
     */
    public void reset() {
        data.clear();
    }


    // CACHING ----------------------------------------------------------------
    
    
	/**
	 * Gets cachePrefix
	 * @return The cachePrefix of this object
	 */
	public String getCachePrefix() {
		return CACHE_PREFIX;
	}


    // DATABASE MANAGER SPECIFIC ----------------------------------------------

    
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
    public String getDBConnectionName() {
    	return "Merits_Merits";
    }

    
    // ------------------------------------------------------------------------
    // PARAMETERS CLASSES -----------------------------------------------------
    // ------------------------------------------------------------------------




}
