package com.merits.modules.base.dao;

// IMPORTS ---------------------------------------------------------------------

import java.sql.CallableStatement;
import java.sql.Timestamp;

import com.weezzi.core.data.*;
import com.weezzi.core.dbmanager.dao.UpdaterDAO;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.SecurityUtilities;


/**
 * <b>Title: </b>Shop Updater Object<br/>
 * <b>Description: </b>Shop Updater Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
 @SuppressWarnings("unused")
public class ShopsUpdater implements UpdaterDAO {


    // PROPERTIES --------------------------------------------------------------

    private long id;
    private long idWallet;
    private Long idCity;
    private String name;
    private Image photo;
    private MapInfo location;
    private String ownerFirstName;
    private String ownerLastName;
    private Phone ownerMobile;
    private String ownerEmail;
    private String bankIban;
    private String bankSwift;
    private String address;
    private String notes;
    private String shopUrl;
    private String shopPhone;
    private String shopEmail;
    private String preferredLanguage;
    private String ownerLogin;
    private String ownerPassword;
    private EditInfo editInfo;


    // CONSTRUCTORS ------------------------------------------------------------


	/**
	 * Empty Constructor
	 **/
	public ShopsUpdater(long id, long idWallet, Long idCity, String name, Image photo, MapInfo location, String ownerFirstName, String ownerLastName, Phone ownerMobile, String ownerEmail, String bankIban, String bankSwift, String address, String notes, String shopUrl, String shopPhone, String shopEmail, String preferredLanguage, String ownerLogin, String ownerPassword, UpdateInfo updateInfo) {
        this.id = id;
        this.idWallet = idWallet;
        this.idCity = idCity;
        this.name = name;
        this.photo = photo;
        this.location = location;
        this.ownerFirstName = ownerFirstName;
        this.ownerLastName = ownerLastName;
        this.ownerMobile = ownerMobile;
        this.ownerEmail = ownerEmail;
        this.bankIban = bankIban;
        this.bankSwift = bankSwift;
        this.address = address;
        this.notes = notes;
        this.shopUrl = shopUrl;
        this.shopPhone = shopPhone;
        this.shopEmail = shopEmail;
        this.preferredLanguage = preferredLanguage;
        this.ownerLogin = ownerLogin;
        this.ownerPassword = ownerPassword;
        this.editInfo = editInfo;
	}


	// PUBLIC -----------------------------------------------------------------

	
    /**
     * Gets DB Connection name
     * @return project database connection name;
     */
	public String getDBConnectionName() {
		return "Merits_Merits";
	}


	/**
	 * Gets update SQL
	 * @return query
	 */
	public String getQuerySQL() {
		return "UPDATE SHOPS " +
               " SET ID_WALLET = ? , ID_CITY = ? , NAME = ? , PHOTO = ? , LOCATION = ? , OWNER_FIRST_NAME = ? , OWNER_LAST_NAME = ? , OWNER_MOBILE = ? , OWNER_EMAIL = ? , BANK_IBAN = ? , BANK_SWIFT = ? , ADDRESS = ? , NOTES = ? , SHOP_URL = ? , SHOP_PHONE = ? , SHOP_EMAIL = ? , PREFERRED_LANGUAGE = ? , OWNER_LOGIN = ? , OWNER_PASSWORD = ? , EDIT_INFO_UPDATE_DATE  = ? , EDIT_INFO_UPDATE_USER  = ?  " +
               " WHERE  ID = ?";
	}
	
	
	/**
	 * Updates Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateFields(CallableStatement statement) throws Exception {
        // Set Fields
        statement.setLong(1, idWallet);
        // Check If Null
        if (idCity == null) {
            statement.setNull(2, java.sql.Types.NUMERIC);
        } else {
            statement.setLong(2, idCity);
        }
        statement.setString(3, StringUtilities.capString(name, 100));
        // Check If Null
        if (photo == null) {
            statement.setNull(4, java.sql.Types.VARCHAR);
        } else {
            statement.setString(4, photo.serialize());
        }
        // Check If Null
        if (location == null) {
            statement.setNull(5, java.sql.Types.NUMERIC);
        } else {
            statement.setString(5, location.serialize());
        }
        // Check If Null
        if (ownerFirstName == null) {
            statement.setNull(6, java.sql.Types.VARCHAR);
        } else {
            statement.setString(6, StringUtilities.capString(ownerFirstName, 100));
        }
        // Check If Null
        if (ownerLastName == null) {
            statement.setNull(7, java.sql.Types.VARCHAR);
        } else {
            statement.setString(7, StringUtilities.capString(ownerLastName, 100));
        }
        // Check If Null
        if (ownerMobile == null) {
            statement.setNull(8, java.sql.Types.VARCHAR);
        } else {
            statement.setString(8, ownerMobile.serialize());
        }
        // Check If Null
        if (ownerEmail == null) {
            statement.setNull(9, java.sql.Types.VARCHAR);
        } else {
            statement.setString(9, StringUtilities.capString(ownerEmail, 50));
        }
        // Check If Null
        if (bankIban == null) {
            statement.setNull(10, java.sql.Types.VARCHAR);
        } else {
            statement.setString(10, StringUtilities.capString(bankIban, 100));
        }
        // Check If Null
        if (bankSwift == null) {
            statement.setNull(11, java.sql.Types.VARCHAR);
        } else {
            statement.setString(11, StringUtilities.capString(bankSwift, 25));
        }
        // Check If Null
        if (address == null) {
            statement.setNull(12, java.sql.Types.VARCHAR);
        } else {
            statement.setString(12, StringUtilities.capString(address, 250));
        }
        // Check If Null
        if (notes == null) {
            statement.setNull(13, java.sql.Types.VARCHAR);
        } else {
            statement.setString(13, StringUtilities.capString(notes, 500));
        }
        // Check If Null
        if (shopUrl == null) {
            statement.setNull(14, java.sql.Types.VARCHAR);
        } else {
            statement.setString(14, StringUtilities.capString(shopUrl, 250));
        }
        // Check If Null
        if (shopPhone == null) {
            statement.setNull(15, java.sql.Types.VARCHAR);
        } else {
            statement.setString(15, StringUtilities.capString(shopPhone, 50));
        }
        // Check If Null
        if (shopEmail == null) {
            statement.setNull(16, java.sql.Types.VARCHAR);
        } else {
            statement.setString(16, StringUtilities.capString(shopEmail, 250));
        }
        // Check If Null
        if (preferredLanguage == null) {
            statement.setNull(17, java.sql.Types.VARCHAR);
        } else {
            statement.setString(17, StringUtilities.capString(preferredLanguage, 3));
        }
        statement.setString(18, SecurityUtilities.encrypt(ownerLogin, "SHOPS", "OWNER_LOGIN"));
        statement.setString(19, SecurityUtilities.encryptSalted(ownerPassword, "SHOPS", "OWNER_PASSWORD", id));
        // Check if edit info create date is Null
        if (editInfo.getCreateDate() == null) {
            statement.setNull(20, java.sql.Types.TIMESTAMP);
        } else {
            // Set create date
            statement.setTimestamp(20,  editInfo.getCreateDate());
        } 
        // Check if edit info create user is Null
        if (editInfo.getCreateUserId() == null) {
            statement.setNull(21, java.sql.Types.NUMERIC);
        } else {
            // Set create user
            statement.setLong(21, editInfo.getCreateUserId());
        } 
        // Check if edit info update date is Null
        if (editInfo.getUpdateDate() == null) {
            statement.setNull(22, java.sql.Types.TIMESTAMP);
        } else {
            // Set update date
            statement.setTimestamp(22,  editInfo.getUpdateDate());
        } 
        // Check if edit info update user is Null
        if (editInfo.getUpdateUserId() == null) {
            statement.setNull(23, java.sql.Types.NUMERIC);
        } else {
            // Set update user
            statement.setLong(23, editInfo.getUpdateUserId());
        } 
        statement.setLong(24, id);
	}


	/**
	 * Gets extended update SQL
	 * @return query
	 */
	public String getExtendedQuerySQL() {
		return null;
	}
	
	
	/**
	 * Updates Extended Query Fields
	 * @param statment
	 * @throws Exception
	 */
	public void updateExtendedQueryFields(CallableStatement statement) throws Exception {
	}
	
	
}
