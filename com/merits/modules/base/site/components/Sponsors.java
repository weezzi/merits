package com.merits.modules.base.site.components;

import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkSponsorsDAO;
import com.merits.modules.base.dao.BulkTeamDAO;
import com.merits.modules.base.dao.SponsorsDAO;
import com.merits.modules.base.dao.TeamDAO;

//IMPORTS -------------------------------------------------------------------------

import com.merits.modules.base.site.components.definitions.SponsorsDefinition;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.extras.console.Console;
import com.weezzi.webserver.simel.AttributeMapper;
import com.weezzi.webserver.simel.Expression;


/**
 * <b>Title: </b> Sponsors<br/>
 * <b>Description: </b> <br/>
 *
 * @author Auto-generated by Weezzi Site Builder
 * @version 1.0
 */
public class Sponsors extends SponsorsDefinition {


	// CONSTANTS ---------------------------------------------------------------

	
	// INITIALIZATION ----------------------------------------------------------
	
	
	public void customComponentInitialization() {
		addGlobalStyle("MeritsV2");
		addGlobalScript("ScriptsV2");
	};


	// BROWSER OUTPUT ----------------------------------------------------------


	/**
	 * Generate Start Output
	 * @return String
	 */
	public String getStartOutput() {
		// Local Variables
		Expression expr;
		AttributeMapper map;
		// Get Expression
		expr = getHTMLExpression("Default");
		map = expr.getAttributeMapper();
		setDefaultMapProperties(map, getPropertiesDefinition());
		// Add attributes
		map.addAttribute("SPONSORS", renderSponsors());
		// Render
		return expr.render(map);
	}

	
	// PRIVATE ----------------------------------------------------------------

	private String renderSponsors() {
		// Local Variables
		Expression expr;
		AttributeMapper map;
		StringBuilder buffer = new StringBuilder();
		BulkSponsorsDAO sponsors;
		// Get Expression
		expr = getHTMLExpression("Sponsor");
		map = expr.getAttributeMapper();		
		try {
			sponsors = BaseContainer.getSponsorsFindByAll(null);
			for(SponsorsDAO sponsor : sponsors.data) {
				if (sponsor.getPublishInfo().isPublished()) {
					map.addAttribute("NAME", sponsor.getName());
					map.addAttribute("PHOTO", getImage(sponsor.getPhoto(), 500, 500));
					map.addAttribute("URL", sponsor.getUrl());
					buffer.append(expr.render(map));
				}
			}
		} catch (Exception e) {
			// Cacth error
			Console.error("Error rendering sponsors", e);
		}
		// Return buffer
		return buffer.toString();
	}

}

