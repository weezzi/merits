package com.merits.modules.base.site.servlets;

import java.awt.image.renderable.ContextualRenderedImageFactory;
import java.sql.Timestamp;
import com.merits.core.MeritsUtils;
import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.PaymentsCodeDAO;
import com.merits.modules.base.dao.PaymentsRequestsDAO;
import com.merits.modules.base.dao.ShopsDAO;
import com.merits.modules.base.dao.VolunteersDAO;
import com.merits.modules.base.dao.WalletRecordsGetBalanceSPQ;
import com.merits.modules.base.site.servlets.definitions.GeneralServletDefinition;
import com.merits.modules.base.uobjects.enums.MeritsUserType;
import com.merits.modules.base.uobjects.enums.PaymentCodeStatus;
import com.merits.modules.base.uobjects.enums.PaymentRequestStatus;
import com.merits.modules.base.uobjects.enums.WalletOperation;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.weezzi.core.context.AjaxServletContext;
import com.weezzi.core.data.UpdateInfo;
import com.weezzi.core.security.sessions.SecurityAccess;
import com.weezzi.core.session.WeezziSession;
import com.weezzi.utils.SecurityUtilities;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.extras.console.Console;
import com.weezzi.utils.extras.mail.MailContainer;
import com.weezzi.utils.extras.mail.data.MailMessage;
import com.weezzi.webserver.simel.AttributeMapper;
import com.weezzi.webserver.simel.Expression;

/**
 * <b>Title: </b> GeneralServlet<br/>
 * <b>Description: </b> GeneralServlet<br/>
 *
 * @author Auto-generated by Weezzi Site Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class GeneralServlet extends GeneralServletDefinition {


	// SERVLET ----------------------------------------------------------------

	
	/**
	 * Initializes the servlet
	 */
	public void initializeServlet() {
		// Local Variables
		
	}

	/**
	 * Destroys the servlet
	 */
	public void destroyServlet() {
		// Local Variables
		
	}


	// PUBLIC -----------------------------------------------------------------

    /**
     * ChangeLanguage action
     */
    protected void changeLanguage(AjaxServletContext context, String langCode) throws Exception {
        // Local Variables
    	String redirect = null;
    	MeritsUserType user = MeritsUtils.getUserType(context);
    	Console.log("Langua:" + langCode);
    	switch(user) {
    		case Volunteer:
    			BaseContainer.updateVolunteerByLanguage(context.getSiteUserId(), langCode, new UpdateInfo(0l));
    			redirect = getPageLink(context, "Volunteers_Settings", langCode);
    			break;
    		case Shop:
    			BaseContainer.updateShopByLanguage(context.getSiteUserId(), langCode, new UpdateInfo(0l));
    			redirect = getPageLink(context, "Shops_Settings", langCode);
    			break;
    		case Cashier:
    			BaseContainer.updateShopCashierByLanguage(context.getSiteUserId(), langCode);
    			redirect = getPageLink(context, "Cashiers_Settings", langCode);
    			break;
    		default:
    			Console.error("Change language for " + user + " not yet implemented!");
    			return;
    	}
    	context.getSession().setSiteLanguage(langCode);
    	redirect(context, redirect);
    }



    /**
     * CancelPaymentCode action
     */
    protected void cancelPaymentCode(AjaxServletContext context) throws Exception {
        // Local Variables
		PaymentsCodeDAO codeDAO;
		try {
			// Get latest payment code 
			codeDAO = BaseContainer.getPaymentsCodeFindByGetLatest(context.getSiteUserId());
			if (codeDAO != null) {
				BaseContainer.updatePaymentsCodeByStatus(codeDAO.getId(), PaymentCodeStatus.Canceled, null);
			}
		} catch (Exception e) {
			// Catch Exception
		}
		redirect(context, getPageLink(context, "Volunteers_Home"));
    }


    /**
     * SelectShop action
     */
    protected void selectShop(AjaxServletContext context, long id) throws Exception {
        // Local Variables
    	ShopsDAO shop;
    	String imageUrl = null;
    	// Get Shop
    	shop = BaseContainer.getShop(id);
    	if (shop == null) {
    		return;
    	}
    	if (shop.getPhoto() != null) {
    		imageUrl = getImageURL(context, shop.getPhoto(), 300, 300);
    	}
    	writeScript(context, getObfuscatedScript(context, "showLogin(" + StringUtilities.encodeJSDecode(imageUrl) + ")"));
    	
    }


    /**
     * AddCashier action
     */
    protected void addCashier(AjaxServletContext context, Long id, String firstName, String lastName, String phone, String username, String password) throws Exception {
        // Local Variables
    	// Check if is a edit or a add
    	if (id == null) {
    		// ADD NEW
    		BaseContainer.createShopCashier(
    				context.getSiteUserId(), 
    				firstName, 
    				lastName, 
    				phone, 
    				username, 
    				SecurityUtilities.getMD5(password), 
    				"it");
    	} else {
    		// UPDATE
    		BaseContainer.updateShopCashierByAll(id, firstName, lastName, phone, username);
    		if (password != null) {
        		BaseContainer.updateShopCashierByPassword(id, SecurityUtilities.getMD5(password));
    		}
    	}
    	redirect(context, getPageLink(context, "Shops_Cashiers"));
    }


    /**
     * ValidateCode action
     */
    protected void validateCode(AjaxServletContext context, String code) throws Exception {
        // Local Variables
    	PaymentsCodeDAO codeDAO;
    	codeDAO = BaseContainer.getPaymentsCodeFindByGetPaymentCode(code);
    	if (codeDAO == null) {
    		writeObfuscatedScript(context, "invalidCode()");
    	} else {
    		if (codeDAO.getCodeStatus() == PaymentCodeStatus.Valid) {
        		writeObfuscatedScript(context, "validCode()");
    		} else {
        		writeObfuscatedScript(context, "invalidCode()");
    		}
    	}
    }


    /**
     * RequestPayment action
     */
    protected void requestPayment(AjaxServletContext context, String code, float value, String goodTypes) throws Exception {
        // Local Variables
    	long id;
    	String[] goods;
    	String goodIds = null;
    	PaymentsCodeDAO codeDAO;
    	codeDAO = BaseContainer.getPaymentsCodeFindByGetPaymentCode(code);
    	// Revalidate code
    	if (codeDAO == null) {
    		writeObfuscatedScript(context, "invalidCode()");
    		return;
    	} else {
    		if (codeDAO.getCodeStatus() != PaymentCodeStatus.Valid) {
        		writeObfuscatedScript(context, "invalidCode()");
        		return;
    		}
    	}
    	// Check good types
    	if (goodTypes != null) {
    		goods = goodTypes.split("[,]");
    		goodIds = "";
    		for(String good : goods) {
    			if (goodIds.length() > 0) {
    				goodIds += ",";
    			}
				goodIds += decryptData(good, context);
    		}
    	}
    	// All valid create record
    	id = BaseContainer.createPaymentsRequest(
    			MeritsUtils.getShopId(context), 
    			context.getSiteUserId(), 
    			codeDAO.getIdVolunteer(), 
    			codeDAO.getId(), 
    			value,
    			goodIds,
    			PaymentRequestStatus.Requested);
    	redirect(context, getPageLink(context, "Cashiers_RequestingPayment") + "?Id=" + encryptData(id, context));
    	sendWebSocketScriptToCustomUserId("V" + codeDAO.getIdVolunteer(), getObfuscatedScript(context, "showPaymentAcceptance('" + encryptData(id, context) + "')"));
    }


    /**
     * VolunteerAcceptPayment action
     */
    protected void volunteerAcceptPayment(AjaxServletContext context, long code) throws Exception {
        // Local Variables
    	String[] goods;
    	Long volunteerRecord = null;
    	Long shopRecord = null;
    	Long shopPaymentRecord = null;
    	ShopsDAO shop;
    	VolunteersDAO volunteer;
    	WalletRecordsGetBalanceSPQ balance;
    	Timestamp date = new Timestamp(System.currentTimeMillis());
    	PaymentsRequestsDAO request = BaseContainer.getPaymentsRequest(code);
    	// Check if exists
    	if (request == null || request.getPaymentStatus() != PaymentRequestStatus.Requested) {
    		redirect(context, getPageLink(context, "Volunteers_Home"));
    		return;
    	}
    	// Get volunteer
    	volunteer = BaseContainer.getVolunteer(request.getIdVolunteer());
    	// Get shop
    	shop = BaseContainer.getShop(request.getIdShop());
    	// Check if volunteer or shop no longer exist
    	if (volunteer == null || shop == null) {
        	BaseContainer.updatePaymentsRequestByStatus(code, PaymentRequestStatus.InvalidData);
			Console.log("Send ERROR message to:" + "C" + request.getIdCashier());
        	sendWebSocketScriptToCustomUserId("C" + request.getIdCashier(), "error()");
    		redirect(context, getPageLink(context, "Volunteers_Home"));
    		return;
    	}
    	// Get balance
    	balance = BaseContainer.getWalletRecordsFindByGetBalanceSPQ(volunteer.getIdWallet());
    	// Check if has enough balance
    	if (balance.getBalance() < request.getTransactionValue()) {
    		// NOT ENOUGH BALANCE
        	// Process payment
        	BaseContainer.updatePaymentsRequestByStatus(code, PaymentRequestStatus.NotEnoughBalance);
			Console.log("Send NO BALANCE message to:" + "C" + request.getIdCashier());
        	sendWebSocketScriptToCustomUserId("C" + request.getIdCashier(), "noBalance()");
    		redirect(context, getPageLink(context, "Volunteers_Home"));
    		return;
    	}
    	// Create record in volunteer wallet
    	try {
    		// Volunteer
			volunteerRecord = BaseContainer.createWalletRecord(
					volunteer.getIdWallet(), 
					WalletType.Volunteer, 
					date, 
					WalletOperation.TransferSend, 
					-1*request.getTransactionValue(), 
					shop.getIdWallet(), 
					WalletType.Shop, 
					shop.getName());
			// Shop
			shopRecord = BaseContainer.createWalletRecord(
					shop.getIdWallet(), 
					WalletType.Shop, 
					date, 
					WalletOperation.TransferReceive, 
					request.getTransactionValue(), 
					volunteer.getIdWallet(), 
					WalletType.Volunteer, 
					MeritsUtils.getPersonName(volunteer));
			// Shop Transactions
			shopPaymentRecord = BaseContainer.createShopTransaction(
					shop.getId(), 
					request.getIdCashier(), 
					volunteer.getId(), 
					volunteerRecord, 
					shopRecord, 
					new Timestamp(System.currentTimeMillis()), 
					request.getGoodTypes(), 
					request.getTransactionValue());
			// Create good types
			if (request.getGoodTypes() != null) {
				goods = request.getGoodTypes().split("[,]");
				for(String good : goods) {
					BaseContainer.createShopTransactionsGood(shop.getId(), request.getIdCashier(), Long.parseLong(good), shopPaymentRecord, date);
				}
			}
			// Process payment
			BaseContainer.updatePaymentsRequestByStatus(code, PaymentRequestStatus.Accepted);
			Console.log("Send SUCESS message to:" + "C" + request.getIdCashier());
			// Send customer
        	sendWebSocketScriptToCustomUserId("C" + request.getIdCashier(), "successful()");
    		redirect(context, getPageLink(context, "Volunteers_Home"));
		} catch (Exception e) {
			// Catch Exception
			Console.error("Error creating volunteer purchase transaction", e);
			// Cancel all records
			try {
				//
				if (volunteerRecord != null) {
					BaseContainer.removeWalletRecord(volunteerRecord);
				}
				if (shopRecord != null) {
					BaseContainer.removeWalletRecord(shopRecord);
				}
				if (shopPaymentRecord != null) {
					BaseContainer.removeShopTransaction(shopPaymentRecord);
					BaseContainer.executeShopTransactionsGoodsDeleteAllFromTransaction(shopPaymentRecord);
				}
				// Process payment
				BaseContainer.updatePaymentsRequestByStatus(code, PaymentRequestStatus.ErrorOccurred);
			} catch (Exception e1) {
				// Catch Exception
				Console.error("Error deleting records", e1);
			}
			// Send error 
			Console.log("Send ERROR message to:" + "C" + request.getIdCashier());
        	sendWebSocketScriptToCustomUserId("C" + request.getIdCashier(), "error()");
    		redirect(context, getPageLink(context, "Volunteers_Home"));
		}
    	
    	
    }


    /**
     * VolunteerRefusePayment action
     */
    protected void volunteerRefusePayment(AjaxServletContext context, long code) throws Exception {
        // Local Variables
    	PaymentsRequestsDAO request = BaseContainer.getPaymentsRequest(code);
    	// Check if exists
    	if (request == null || request.getPaymentStatus() != PaymentRequestStatus.Requested) {
    		redirect(context, getPageLink(context, "Volunteers_Home"));
    		return;
    	}
    	BaseContainer.updatePaymentsRequestByStatus(code, PaymentRequestStatus.Refused);
		Console.log("Send REFUSED message to:" + "C" + request.getIdCashier());
    	sendWebSocketScriptToCustomUserId("C" + request.getIdCashier(), "refused()");
		redirect(context, getPageLink(context, "Volunteers_Home"));
    }


    /**
     * Contact action
     */
    protected void contact(AjaxServletContext context, String name, String email, String phone, String message) throws Exception {
        // Local Variables
    	Expression expr;
    	AttributeMapper map = new AttributeMapper();
    	MailMessage mail = new MailMessage();
    	// Get Expression
    	expr = getHTMLExpression(context, "Contacts", "ContactEmail");
    	mail.setFromAddress("no-reply@weezzisoftware.com");
    	mail.setFromTitle("Merits Server");
    	mail.setToAddress("info@merits.vision");
    	map.addAttribute("NAME", name);
    	map.addAttribute("EMAIL", email);
    	map.addAttribute("PHONE", phone);
    	map.addAttribute("MESSAGE", StringUtilities.replaceCRbyBR(message));
    	mail.setSubject("New contact from " + name);
    	mail.setHTMLMessage(expr.render(map));
    	MailContainer.sendEmail(mail);
    	writeHTML(context, "MessageHolder", getGlobalDictionaryTranslation(context, "Thank you for your contact"));
    }


    /**
     * Logout action
     */
    protected void logout(AjaxServletContext context) throws Exception {
        // Local Variables
    	WeezziSession session = context.getSession();
    	session.setSiteUserId(null);
		session.removeAccessRule(new SecurityAccess("UserType", "Volunteer"));
		session.removeAccessRule(new SecurityAccess("UserType", "ShopOwner"));
		session.removeAccessRule(new SecurityAccess("UserType", "ShopCashier"));
		context.deleteCookie(MeritsUtils.REMEMBER_COOKIE);
    	redirect(context, getPageLink(context, "Home"));
    }



}
