package com.merits.modules.base.backoffice.tables;

import com.merits.core.MeritsUtils;

//IMPORTS -------------------------------------------------------------------------

import com.merits.modules.base.backoffice.tables.definitions.VolunteersTableDefinition;
import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkShopsDAO;
import com.merits.modules.base.dao.BulkVolunteersDAO;
import com.merits.modules.base.dao.ShopsDAO;
import com.merits.modules.base.dao.VolunteersDAO;
import com.merits.modules.base.dao.WalletRecordsGetBalanceSPQ;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Vector;

import com.weezzi.core.context.TableContext;
import com.weezzi.core.data.Tree;
import com.weezzi.core.exceptions.CheckDigitsFailedException;
import com.weezzi.webserver.simel.AttributeMapper;
import com.weezzi.webserver.simel.Expression;
import com.weezzi.core.tables.TableColumnOrdering;
import com.weezzi.utils.extras.console.Console;


/**
 * <b>Title: </b> Volunteers<br/>
 * <b>Description: </b> <br/>
 *
 * @author Auto-generated by Weezzi Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class VolunteersTable extends VolunteersTableDefinition {



	// TABLE SPECIFIC ---------------------------------------------------------


	/**
	 * Initializes the table
	 */
	public void initializeTable() {
		// Local Variables
		
	}

	/**
	 * Wraps up table finalization
	 */
	public void finalizeTable() {
		// Local Variables
		
	}
	
	
	// ACTIONS ----------------------------------------------------------------
	
	
	/**
	 * Add Action
	 * @param context
	 */
	public void doAddAction(TableContext context, String categoryId) {
		// Local Variables
		showFormDialog("AddVolunteer", null);
	}


	/**
	 * Remove Action
	 * @param context
	 * @param ids Remove row ids 
	 */
	public void doRemoveAction(TableContext context, Collection<Long> ids) {
		// Local Variables
		for(Long id : ids ) {
			try {
				BaseContainer.removeVolunteer(id);
			} catch (Exception e) {
				Console.error("Error deleting volunteer", e);
			}
		}
	}


	/**
	 * Move Action
	 * @param context
	 * @param sourceId Source Id
	 * @param destinationId Destination Id
	 */
	public void doMoveAction(TableContext context, String sourceId, String destinationId, String direction) {
		// Local Variables
		
	}

	
	/**
	 * Publish Action
	 * @param context
	 * @param id Source Id
	 * @param published Published
	 */
	public boolean doPublishAction(TableContext context, String id, boolean published) {
		// Local Variables
		return false;
	}

	
	// RENDERS ----------------------------------------------------------------
	
	
	/**
	 * Gets data action
	 */
	public void doGetDataAction(TableContext context, int startIndex, int endIndex, String search, String categoryId) {
		// Local Variables
		String name, desc;
		WalletRecordsGetBalanceSPQ balance;
		BulkVolunteersDAO volunteers = BaseContainer.getVolunteersBlockFindByAll(search, startIndex, endIndex);
		for(VolunteersDAO volunteer : volunteers.data) {
			name = "";
			if (volunteer.getMobile() != null) {
				desc = volunteer.getMobile();
			} else {
				desc = "";
			}
			if (volunteer.getFirstName() != null) {
				name += volunteer.getFirstName();
			}
			if (volunteer.getLastName() != null) {
				name += " " + volunteer.getLastName();
			}
			try {
				balance = BaseContainer.getWalletRecordsFindByGetBalanceSPQ(volunteer.getIdWallet());
				addRow(volunteer.getId(), volunteer.getPhoto(), name, desc, 
						MeritsUtils.formatNumber(balance.getBalance()), 
						"Topup", null, "topupUser(\"" + encryptData(volunteer.getId()) + "\")", volunteer.getEditInfo());
			} catch (Exception e) {
				// Catch Exception
				Console.error("Error getting volunteer balance", e);
			}
		}
	}

	
	/**
	 * Renders a tree
	 */
	public Tree doGetTreeAction(TableContext context) {
		// Local Variables
		return null;
	}

}

