package com.merits.modules.base.backoffice.tables;

//IMPORTS -------------------------------------------------------------------------

import com.merits.modules.base.backoffice.tables.definitions.TransactionsTableDefinition;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;

import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkCompaniesDAO;
import com.merits.modules.base.dao.BulkWalletRecordsDAO;
import com.merits.modules.base.dao.CompaniesDAO;
import com.merits.modules.base.dao.ShopsDAO;
import com.merits.modules.base.dao.VolunteersDAO;
import com.merits.modules.base.dao.WalletRecordsDAO;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.weezzi.core.context.TableContext;
import com.weezzi.core.data.Image;
import com.weezzi.core.data.List;
import com.weezzi.core.data.ListItem;
import com.weezzi.core.data.Tree;
import com.weezzi.core.utils.ChartUtils;
import com.weezzi.system.modules.backoffice.container.BackOfficeContainer;
import com.weezzi.system.modules.wcontacts.container.WContactsContainer;
import com.weezzi.utils.CalendarUtilities;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.extras.console.Console;
import com.weezzi.webserver.simel.AttributeMapper;
import com.weezzi.webserver.simel.Expression;
import com.weezzi.core.tables.TableColumnOrdering;

import java.util.Collection;

import jxl.StringFormulaCell;

/**
 * <b>Title: </b> Transactions<br/>
 * <b>Description: </b> <br/>
 *
 * @author Auto-generated by Weezzi Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class TransactionsTable extends TransactionsTableDefinition {

    // TABLE SPECIFIC ---------------------------------------------------------

    /**
     * Initializes the table
     */
    public void initializeTable() {
        // Local Variables
        List shops = new List();
        List users = new List();
        try {
            shops = BaseContainer.getShopsShopsList().clone();
            users = BaseContainer.getVolunteersVolunteersList().clone();
            // Add all item
            shops.addItemAtBeginning(new ListItem("All", ""));
            users.addItemAtBeginning(new ListItem("All", ""));
        } catch (Exception e) {
            Console.error("Error getting lists", e);
        }
        addHeaderTableTimeSelector("time", "All time", "black", "all", "now");
        addHeaderTableListOption("shop", "SysIconShop", "Shop", "All", shops, null, "shops");
        addHeaderTableListOption("user", "SysIconUser", "User", "All", users, null, "users");
        addHeaderRightOption("<wbutton class=\"" + getObfuscatedStyle(getContext(), "WBOButtonWhite") + "\" onclick=\"" + getObfuscatedScript(
                "merits_wallet_exportTransactions") + "()\">Export</wbutton>");
    }

    /**
     * Wraps up table finalization
     */
    public void finalizeTable() {
        // Local Variables

    }

    // ACTIONS ----------------------------------------------------------------

    /**
     * Add Action
     *
     * @param context
     */
    public void doAddAction(TableContext context, String categoryId) {
        // Local Variables
    }

    /**
     * Remove Action
     *
     * @param context
     * @param ids     Remove row ids
     */
    public void doRemoveAction(TableContext context, Collection<Long> ids) {
        // Local Variables

    }

    /**
     * Copy Action
     *
     * @param context
     * @param ids     Copy row ids
     */
    public void doCopyAction(TableContext context, Collection<Long> ids) {
        // Local Variables

    }

    /**
     * Move Action
     *
     * @param context
     * @param sourceId      Source Id
     * @param destinationId Destination Id
     */
    public void doMoveAction(TableContext context, String sourceId, String destinationId, String direction) {
        // Local Variables

    }

    /**
     * Publish Action
     *
     * @param context
     * @param id        Source Id
     * @param published Published
     */
    public boolean doPublishAction(TableContext context, String id, boolean published) {
        // Local Variables
        return false;
    }

    // RENDERS ----------------------------------------------------------------

    /**
     * Gets data action
     */
    public void doGetDataAction(TableContext context, int startIndex, int endIndex, String search, String categoryId) {
        // Local Variables
        BulkWalletRecordsDAO daoWalletRecords;
        String strFromName;
        String strToName;
        Image fromPhoto;
        Image toPhoto;
        VolunteersDAO daoVolunteer;
        ShopsDAO daoShop;
        StringBuffer auxSb;
        try {
            final Long luser = getParameterAsLong("users");
            final Long lshop = getParameterAsLong("shops");
            Calendar startDate, endDate;
            if (getParameter("earliest") == null || getParameter("latest") == null) {
                startDate = Calendar.getInstance();
                startDate.add(Calendar.DATE, -15);
                endDate = Calendar.getInstance();
            } else {
                startDate = ChartUtils.getDateFromShortcut(getParameter("earliest"));
                endDate = ChartUtils.getDateFromShortcut(getParameter("latest"));
            }
            Console.debug("startDate: " + startDate);
            Console.debug("endDate: " + endDate);
            daoWalletRecords = BaseContainer.getWalletRecordsFindByAll(luser, lshop, search, CalendarUtilities.getFullStandardDate(startDate), CalendarUtilities.getFullStandardDate(endDate));
            setTotalDataSize(daoWalletRecords.getTotalSize());
            // Set empty row
            if (daoWalletRecords.getTotalSize() == 0) {
            	addNoDataRow();
            }
            // Write wallet records
            for (WalletRecordsDAO daoWalletRecord : daoWalletRecords.data) {
            	strFromName = null;
                strToName = null;
                fromPhoto = null;
                toPhoto = null;
                if (WalletType.Shop.getValue() == daoWalletRecord.getWalletType().getValue()) {
                    daoShop = BaseContainer.getShopFindByWallet(daoWalletRecord.getIdWallet());
                    if (daoShop != null) {
                        strFromName = daoShop.getName();
                        fromPhoto = daoShop.getPhoto();
                    } else {
                        strFromName = "UNKNOWN SHOP";
                    }
                } else if (WalletType.Volunteer.getValue() == daoWalletRecord.getWalletType().getValue()) {
                    daoVolunteer = BaseContainer.getVolunteerFindByWallet(daoWalletRecord.getIdWallet());
                    if (daoVolunteer != null) {
                        auxSb = new StringBuffer(daoVolunteer.getFirstName()).append(" ").append(daoVolunteer.getLastName());
                        strFromName = auxSb.toString();
                        fromPhoto = daoVolunteer.getPhoto();
                    } else {
                        strFromName = "UNKNOWN VOLUNTEER";
                    }
                } else {
                    strFromName = daoWalletRecord.getWalletType().getName();
                }
                if (WalletType.Shop.getValue() == daoWalletRecord.getRefWalletType().getValue()) {
                    daoShop = BaseContainer.getShopFindByWallet(daoWalletRecord.getRefWallet());
                    if (daoShop != null) {
                        strToName = daoShop.getName();
                        toPhoto = daoShop.getPhoto();
                    } else {
                        strToName = "UNKNOWN SHOP";
                    }
                } else if (WalletType.Volunteer.getValue() == daoWalletRecord.getRefWalletType().getValue()) {
                    daoVolunteer = BaseContainer.getVolunteerFindByWallet(daoWalletRecord.getRefWallet());
                    if (daoVolunteer != null) {
                        auxSb = new StringBuffer(daoVolunteer.getFirstName()).append(" ").append(daoVolunteer.getLastName());
                        strToName = auxSb.toString();
                        toPhoto = daoVolunteer.getPhoto();
                    } else {
                        strToName = "UNKNOWN VOLUNTEER";
                    }
                } else {
                    strToName = daoWalletRecord.getRefWalletType().getName();
                }
                addRow(daoWalletRecord.getId(), null,
                        CalendarUtilities.getFullMonthNameDateWithTime(getBackofficeLanguage(), daoWalletRecord.getTransactionDate()), strFromName, fromPhoto,
                        strToName, toPhoto,
                        daoWalletRecord.getOperation().getName(), String.format("%.2f", daoWalletRecord.getTransactionValue()));
            }
        } catch (Exception e) {
            Console.error("Error getting shops", e);
        }
    }

    /**
     * Renders a tree
     */
    public Tree doGetTreeAction(TableContext context) {
        // Local Variables
        return null;
    }

}

