package com.merits.modules.base.backoffice.tables;

import java.util.Collection;

//IMPORTS -------------------------------------------------------------------------

import com.merits.modules.base.backoffice.tables.definitions.CitiesTableDefinition;
import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkCitiesDAO;
import com.merits.modules.base.dao.CitiesDAO;
import com.weezzi.core.context.TableContext;
import com.weezzi.core.data.Tree;
import com.weezzi.utils.extras.console.Console;


/**
 * <b>Title: </b> Cities<br/>
 * <b>Description: </b> <br/>
 *
 * @author Auto-generated by Weezzi Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class CitiesTable extends CitiesTableDefinition {



	// TABLE SPECIFIC ---------------------------------------------------------


	/**
	 * Initializes the table
	 */
	public void initializeTable() {
		// Local Variables
		
	}

	/**
	 * Wraps up table finalization
	 */
	public void finalizeTable() {
		// Local Variables
		
	}
	
	
	// ACTIONS ----------------------------------------------------------------
	
	
	/**
	 * Add Action
	 * @param context
	 */
	public void doAddAction(TableContext context, String categoryId) {
		// Local Variables
		showFormDialog("City", "CountryId=" + getParameter("Id"));
	}


	/**
	 * Remove Action
	 * @param context
	 * @param ids Remove row ids 
	 */
	public void doRemoveAction(TableContext context, Collection<Long> ids) {
		// Local Variables
		for(Long id : ids) {
			try {
				BaseContainer.removeCity(id);
			} catch (Exception e) {
				// Catch Exception
				Console.error("Error removing city", e);
			}
		}
	}


	/**
	 * Copy Action
	 * @param context
	 * @param ids Copy row ids 
	 */
	public void doCopyAction(TableContext context, Collection<Long> ids) {
		// Local Variables
		
	}


	/**
	 * Move Action
	 * @param context
	 * @param sourceId Source Id
	 * @param destinationId Destination Id
	 */
	public void doMoveAction(TableContext context, Long sourceId, Long destinationId, String direction) {
		// Local Variables
		
	}

	
	/**
	 * Publish Action
	 * @param context
	 * @param id Source Id
	 * @param published Published
	 */
	public boolean doPublishAction(TableContext context, Long id, boolean published) {
		// Local Variables
		try {
			BaseContainer.publishCity(id, published, getBackofficeUserId());
		} catch (Exception e) {
			// Catch Exception
			Console.error("Error publishing/unpublishing city", e);
		}
		return false;
	}

	
	// RENDERS ----------------------------------------------------------------
	
	
	/**
	 * Gets data action
	 */
	public void doGetDataAction(TableContext context, int startIndex, int endIndex, String search, String categoryId) {
		// Local Variables
		try {
			long countryId = getParameterEncryptedAsLong("Id");
			BulkCitiesDAO cities = BaseContainer.getCitiesFindByAll(countryId);
			for(CitiesDAO city : cities.data) {
				addRow(city.getId(), city.getPublishInfo(), city.getName(), "Lat: " + city.getGeoLocation().getLatitude() + "<br>Long: " + city.getGeoLocation().getLongitude());
			}
		} catch (Exception e) {
			// Catch Exception
			Console.error("Error getting cities", e);
		}
	}

	
	/**
	 * Renders a tree
	 */
	public Tree doGetTreeAction(TableContext context) {
		// Local Variables
		return null;
	}

}

