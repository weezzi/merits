package com.merits.modules.base.backoffice.tables;

import java.util.Vector;
import com.merits.core.MeritsUtils;

//IMPORTS -------------------------------------------------------------------------

import com.merits.modules.base.backoffice.tables.definitions.UsersTableDefinition;
import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkVolunteersUsersSPQ;
import com.merits.modules.base.dao.VolunteersUsersSPQ;
import com.weezzi.core.context.TableContext;
import com.weezzi.core.data.Tree;
import com.weezzi.utils.extras.console.Console;


/**
 * <b>Title: </b> Users<br/>
 * <b>Description: </b> <br/>
 *
 * @author Auto-generated by Weezzi Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class UsersTable extends UsersTableDefinition {



	// TABLE SPECIFIC ---------------------------------------------------------


	/**
	 * Initializes the table
	 */
	public void initializeTable() {
		// Local Variables
		
	}

	/**
	 * Wraps up table finalization
	 */
	public void finalizeTable() {
		// Local Variables
		
	}
	
	
	// ACTIONS ----------------------------------------------------------------
	
	
	/**
	 * Add Action
	 * @param context
	 */
	public void doAddAction(TableContext context, String categoryId) {
		// Local Variables
	}


	/**
	 * Remove Action
	 * @param context
	 * @param ids Remove row ids 
	 */
	public void doRemoveAction(TableContext context, Vector<String> ids) {
		// Local Variables
		
	}


	/**
	 * Move Action
	 * @param context
	 * @param sourceId Source Id
	 * @param destinationId Destination Id
	 */
	public void doMoveAction(TableContext context, String sourceId, String destinationId, String direction) {
		// Local Variables
		
	}

	
	/**
	 * Publish Action
	 * @param context
	 * @param id Source Id
	 * @param published Published
	 */
	public boolean doPublishAction(TableContext context, String id, boolean published) {
		// Local Variables
		return false;
	}

	
	// RENDERS ----------------------------------------------------------------
	
	
	/**
	 * Gets data action
	 */
	public void doGetDataAction(TableContext context, int startIndex, int endIndex, String search, String categoryId) {
		// Local Variables
		String key;
		String icon;
		String desc;
		String name = null;
		BulkVolunteersUsersSPQ users;
		try {
			if (search != null) {
				search = search.toLowerCase();
			}
			users = BaseContainer.getVolunteersFindByUsersSPQ(search);
			for(VolunteersUsersSPQ usr : users.data) {
				desc = null;
				switch(usr.getType()) {
					case 1:
						icon = "SysIconVolunteers";
						name = MeritsUtils.getPersonName(usr.getFirstName(), usr.getLastName());
						break;
					case 2:
						icon = "SysIconShop";
						name = usr.getShop();
						break;
					case 3:
						icon = "SysIconCashier";
						name = MeritsUtils.getPersonName(usr.getFirstName(), usr.getLastName());
						desc = usr.getShop();
						break;
					default:
						icon = null;
						break;
				}
				key = usr.getType() + "_" + usr.getId();
				addRow(key, "<span class=\"Icon " + icon + "\"></span>", usr.getPhoto(), name, desc, "Simulate", "/backoffice/servlets/Simulation/Simulate/?Id=" + encryptData(key), null);
			}
		} catch (Exception e) {
			// Catch Exception
			Console.error("Error getting all users", e);
		}
	}

	
	/**
	 * Renders a tree
	 */
	public Tree doGetTreeAction(TableContext context) {
		// Local Variables
		return null;
	}

}

