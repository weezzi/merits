package com.merits.modules.base.backoffice.tables;

//IMPORTS -------------------------------------------------------------------------

import com.merits.modules.base.backoffice.tables.definitions.ShopGoodTypesTableDefinition;
import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkShopGoodtypesDAO;
import com.merits.modules.base.dao.GoodTypesDAO;
import com.merits.modules.base.dao.ShopGoodtypesDAO;
import java.util.Collection;
import java.util.Vector;

import com.weezzi.core.context.TableContext;
import com.weezzi.core.data.Tree;
import com.weezzi.core.exceptions.CheckDigitsFailedException;
import com.weezzi.webserver.simel.AttributeMapper;
import com.weezzi.webserver.simel.Expression;
import com.weezzi.core.tables.TableColumnOrdering;
import com.weezzi.utils.extras.console.Console;


/**
 * <b>Title: </b> ShopGoodTypes<br/>
 * <b>Description: </b> <br/>
 *
 * @author Auto-generated by Weezzi Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class ShopGoodTypesTable extends ShopGoodTypesTableDefinition {



	// TABLE SPECIFIC ---------------------------------------------------------


	/**
	 * Initializes the table
	 */
	public void initializeTable() {
		// Local Variables
		
	}

	/**
	 * Wraps up table finalization
	 */
	public void finalizeTable() {
		// Local Variables
		
	}
	
	
	// ACTIONS ----------------------------------------------------------------
	
	
	/**
	 * Add Action
	 * @param context
	 */
	public void doAddAction(TableContext context, String categoryId) {
		// Local Variables
		showFormDialog("AddShopGoodType", "Id=" + getParameter("Id"));
	}


	/**
	 * Remove Action
	 * @param context
	 * @param ids Remove row ids 
	 */
	public void doRemoveAction(TableContext context, Collection<Long> ids) {
		// Local Variables
		for(Long id : ids) {
			try {
				BaseContainer.removeShopGoodtype(id);
			} catch (Exception e) {
				// Catch Exception
				Console.error("Error deleting good type", e);
			}
		}
	}


	/**
	 * Move Action
	 * @param context
	 * @param sourceId Source Id
	 * @param destinationId Destination Id
	 */
	public void doMoveAction(TableContext context, String sourceId, String destinationId, String direction) {
		// Local Variables
		
	}

	
	/**
	 * Publish Action
	 * @param context
	 * @param id Source Id
	 * @param published Published
	 */
	public boolean doPublishAction(TableContext context, String id, boolean published) {
		// Local Variables
		return false;
	}

	
	// RENDERS ----------------------------------------------------------------
	
	
	/**
	 * Gets data action
	 */
	public void doGetDataAction(TableContext context, int startIndex, int endIndex, String search, String categoryId) {
		// Local Variables
		Long shopId;
		GoodTypesDAO gt;
		BulkShopGoodtypesDAO goodTypes;
		// Get good types
		try {
			shopId = getParameterEncryptedAsLong("Id");
			goodTypes = BaseContainer.getShopGoodtypesFindByGoodTypes(shopId);
			for(ShopGoodtypesDAO good : goodTypes.data) {
				gt = BaseContainer.getGoodType(good.getIdGoodtype(), "en");
				addRow(good.getId(), gt.getName());
			}
		} catch (Exception e) {
			// Catch Exception
			Console.error("Error getting shop good types");
		}
		
	}

	
	/**
	 * Renders a tree
	 */
	public Tree doGetTreeAction(TableContext context) {
		// Local Variables
		return null;
	}

}

