package com.merits.modules.base.backoffice.servlets.definitions;

//IMPORTS --------------------------------------------------------------------

import java.util.Vector;
import java.sql.Timestamp;
import com.weezzi.core.data.*;

import com.weezzi.utils.extras.console.Console;

import com.weezzi.core.data.FileParameter;
import com.weezzi.core.context.AjaxServletContext;
import com.weezzi.core.context.ServletContext;
import com.weezzi.core.servlets.base.WeezziServletAction;
import com.weezzi.core.servlets.base.WeezziBackofficeServlet;
import com.weezzi.core.servlets.exceptions.WeezziServletException;


/**
 * <b>Title: </b> SimulationDefinition<br/>
 * <b>Description: </b> SimulationDefinition<br/>
 *
 * @author Auto-generated by Weezzi Site Builder
 * @version 1.0
 */
public abstract class SimulationServletDefinition extends WeezziBackofficeServlet {

	
	// CONSTANTS --------------------------------------------------------------


    protected static final String SIMULATEACTION_PARAMETER_ID = "Id";


	// ACTIONS -----------------------------------------------------------------

	
    /**
     * Simulate action
     */
    protected abstract void simulate(ServletContext context, String id) throws Exception;


	

	// SERVLET SPECIFIC -------------------------------------------------------

	
	/**
	 * Processes a servlet request
	 * @param context Servlet context
	 */
	public void processServletRequest(ServletContext context, WeezziServletAction servletAction) throws Throwable {
		// Local Variables
		SimulationServletAjaxActions ajaxAction;
		SimulationServletStandardActions standardAction;
		// Check if is AJAX or Standard action
		if (context.isAjaxRequest()) {
			// IS AJAX
			// Get action
			ajaxAction = (SimulationServletAjaxActions) servletAction;
			// Process actions
			try {
				switch(ajaxAction) {
				}			
			} catch(Throwable e) {
				throw new WeezziServletException(e);
			}
		} else {
			// IS STANDARD
			// Get action
			standardAction = (SimulationServletStandardActions) servletAction;
			// Process actions
			try {
				switch(standardAction) {
                    case Simulate:
                        simulateStandardAction(context);
                        break;
				}			
			} catch(Throwable e) {
				throw new WeezziServletException(e);
			}
		}
	}
	
	
	/**
	 * Processes a auto-complete request
	 * @param context Auto-complete context
	 */
	public AutoCompleteList processAutoCompleteRequest(ServletContext context, WeezziServletAction servletAction) throws Throwable {
		// Local Variables
		SimulationServletAutoCompleteActions action;
		// Get action
		action = (SimulationServletAutoCompleteActions) servletAction;
		// Process actions
		try {
			switch(action) {
			}			
		} catch(Throwable e) {
			throw new WeezziServletException(e);
		}
		return null;
	}


	/**
	 * Gets a action by its string name
	 * @param actionName Action Name
	 * @return WeezziServletAction Servlet action
	 */
	public WeezziServletAction getStandardActionByPrefix(String actionName) {
		// Check actions url prefixes
		for(SimulationServletStandardActions action : SimulationServletStandardActions.values()) {
			if (action.getUrlPrefix().equals(actionName)) {
				return action;
			}
		}
		return null;
	}


	/**
	 * Gets a action by its string name
	 * @param actionName Action Name
	 * @return WeezziServletAction Servlet action
	 */
	public WeezziServletAction getAjaxActionByPrefix(String actionName) {
		// Check actions url prefixes
		for(SimulationServletAjaxActions action : SimulationServletAjaxActions.values()) {
			if (action.getUrlPrefix().equals(actionName)) {
				return action;
			}
		}
		return null;
	}


	/**
	 * Gets a action by its string name
	 * @param actionName Action Name
	 * @return WeezziServletAction Servlet action
	 */
	public WeezziServletAction getAutoCompleteActionByPrefix(String actionName) {
		// Check actions url prefixes
		for(SimulationServletAutoCompleteActions action : SimulationServletAutoCompleteActions.values()) {
			if (action.getUrlPrefix().equals(actionName)) {
				return action;
			}
		}
		return null;
	}

	
	// ACTION INTERNAL METHODS -----------------------------------------------------


    /**
     * Simulate action
     *@param context Servlet context
     */
    private void simulateStandardAction(ServletContext context) throws Exception {
        // Local Variables
        String id;
        // Get Id
        id = getParameterRequired(SIMULATEACTION_PARAMETER_ID, context);
        // Do action
        simulate(context, id);
    }




	// DEBUGGING METHODS -----------------------------------------------------------


    /**
     * Debug Simulate action parameters
     *@param context Servlet context
     */
    protected void debugSimulateStandardAction(ServletContext context) throws Exception {
        // Debugs action parameters
        Console.debug("Debugging action \"Simulate\" parameters:");
        Console.debug(1, SIMULATEACTION_PARAMETER_ID + ": " + getParameter(SIMULATEACTION_PARAMETER_ID, context));
    }



}
