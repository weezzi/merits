package com.merits.modules.base.backoffice.servlets;

import java.io.File;
import java.io.FileInputStream;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Calendar;

import com.merits.core.MeritsUtils;
import com.merits.core.WalletTransactionInfo;
import com.merits.modules.base.backoffice.servlets.definitions.UtilsServletDefinition;
import com.merits.modules.base.container.BaseContainer;
import com.merits.modules.base.dao.BulkWalletRecordsDAO;
import com.merits.modules.base.dao.ShopsDAO;
import com.merits.modules.base.dao.VolunteersDAO;
import com.merits.modules.base.dao.WalletRecordsDAO;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.weezzi.core.context.ServletContext;
import com.weezzi.core.server.ServerContainer;
import com.weezzi.core.utils.ChartUtils;
import com.weezzi.utils.CalendarUtilities;
import com.weezzi.utils.FileUtilities;
import com.weezzi.utils.StringUtilities;
import com.weezzi.utils.extras.console.Console;

import jxl.Workbook;
import jxl.write.DateTime;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

/**
 * <b>Title: </b> UtilsServlet<br/>
 * <b>Description: </b> UtilsServlet<br/>
 *
 * @author Auto-generated by Weezzi Site Builder
 * @version 1.0
 */
@SuppressWarnings("unused")
public class UtilsServlet extends UtilsServletDefinition {

    // SERVLET ----------------------------------------------------------------

    /**
     * Initializes the servlet
     */
    public void initializeServlet() {
        // Local Variables

    }

    /**
     * Destroys the servlet
     */
    public void destroyServlet() {
        // Local Variables

    }

    // PUBLIC -----------------------------------------------------------------

    /**
     * ExportToExcel action
     */
    protected void exportToExcel(ServletContext context) throws Exception {
        // Local Variables
    }

    /**
     * ExportWalletTransactionToExcel action
     */
    protected void exportWalletTransactionToExcel(ServletContext context, Long shop, Long volunteer, String search, String earliest, String latest)
            throws Exception {
        Console.debug("#exportWalletTransactionToExcel(...)...");
        Console.debug("shop: " + shop);
        Console.debug("volunteer: " + volunteer);
        Console.debug("search: " + search);
        Console.debug("earliest: " + earliest);
        Console.debug("latest: " + latest);
        // Local Variables
        WalletTransactionInfo info;
        BulkWalletRecordsDAO records;
        StringBuilder buffer = new StringBuilder();
        int rowNumber = 0;
        Label msexLbl;
        jxl.write.Number msexNum;
        jxl.DateCell msexDate;
        String strTmpFileName = ServerContainer.getTemporaryFile();
        File tmpFile = new File(strTmpFileName);
        BigDecimal bigDecimal;
        MathContext mc = new MathContext(4, RoundingMode.HALF_EVEN);
        Calendar startDate, endDate;
        if (earliest == null || latest == null) {
            startDate = Calendar.getInstance();
            startDate.add(Calendar.DATE, -15);
            endDate = Calendar.getInstance();
        } else {
            startDate = ChartUtils.getDateFromShortcut(earliest);
            endDate = ChartUtils.getDateFromShortcut(latest);
        }
        Console.debug("startDate: " + startDate);
        Console.debug("endDate: " + endDate);
        // Get Wallet transactions
        records = BaseContainer.getWalletRecordsFindByAll(volunteer, shop, StringUtilities.decodeURIComponent(search),
                CalendarUtilities.getFullStandardDate(startDate), CalendarUtilities.getFullStandardDate(endDate));
        // Create header row
        buffer.append("Date, Operation,Value, WalletType, Name, ReferenceWalletType, ReferenceName\n");
        WritableWorkbook msexWbook = Workbook.createWorkbook(tmpFile);
        WritableSheet msexSheet = msexWbook.createSheet("WalletTransactions", 0);
        msexLbl = new Label(0, 0, "Date");
        msexSheet.addCell(msexLbl);
        msexLbl = new Label(1, 0, "Operation");
        msexSheet.addCell(msexLbl);
        msexLbl = new Label(2, 0, "Value");
        msexSheet.addCell(msexLbl);
        msexLbl = new Label(3, 0, "WalletType");
        msexSheet.addCell(msexLbl);
        msexLbl = new Label(4, 0, "Name");
        msexSheet.addCell(msexLbl);
        msexLbl = new Label(5, 0, "ReferenceWalletType");
        msexSheet.addCell(msexLbl);
        msexLbl = new Label(6, 0, "ReferenceName");
        msexSheet.addCell(msexLbl);
        for (WalletRecordsDAO rec : records.data) {
            rowNumber -= -1;
            //            Console.debug("rowNumber: " + rowNumber);
            //            Console.debug("id: " + rec.getId());
            //            Console.debug("getTransactionDate: " + rec.getTransactionDate());
            //            Console.debug("getFormatedDate: " + MeritsUtils.getFormatedDate(rec.getTransactionDate(), "en"));
            //            Console.debug("getTransactionValue: " + rec.getTransactionValue());
            // Date
            //            msexDate = new DateTime(0, rowNumber, rec.getTransactionDate());
            msexLbl = new Label(0, rowNumber, MeritsUtils.getFormatedDate(rec.getTransactionDate(), "en"));
            msexSheet.addCell(msexLbl);
            //            buffer.append("\"").append(MeritsUtils.getFormatedDate(rec.getTransactionDate(), "en")).append("\",");
            // Operation
            msexLbl = new Label(1, rowNumber, rec.getOperation().getName());
            msexSheet.addCell(msexLbl);
            //            buffer.append("\"").append(rec.getOperation().getName()).append("\",");
            // Value
            //            msexNum = new jxl.write.Number(2, rowNumber, rec.getTransactionValue());
            bigDecimal = new BigDecimal(rec.getTransactionValue(), mc);
            msexNum = new jxl.write.Number(2, rowNumber, bigDecimal.doubleValue());
            msexSheet.addCell(msexNum);
            //            buffer.append("\"").append(String.format("%.2f", rec.getTransactionValue())).append("\",");
            // From Wallet Type
            msexLbl = new Label(3, rowNumber, rec.getWalletType().getName());
            msexSheet.addCell(msexLbl);
            //            buffer.append("\"").append(rec.getWalletType().getName()).append("\",");
            // From Wallet Name
            msexLbl = new Label(4, rowNumber, getWalletName(rec.getWalletType().getValue(), rec.getIdWallet()));
            msexSheet.addCell(msexLbl);
            //            buffer.append("\"").append(MeritsUtils.getWalletName(rec.getWalletType(), rec.getIdWallet())).append("\",");
            // From Wallet Type
            msexLbl = new Label(5, rowNumber, rec.getRefWalletType().getName());
            msexSheet.addCell(msexLbl);
            //            buffer.append("\"").append(rec.getRefWalletType().getName()).append("\",");
            // From Wallet Name
            rec.getRefWallet();
            msexLbl = new Label(6, rowNumber, getWalletName(rec.getRefWalletType().getValue(), rec.getRefWallet()));
            msexSheet.addCell(msexLbl);
            //            buffer.append("\"").append(MeritsUtils.getWalletName(rec.getRefWalletType(), rec.getRefWallet())).append("\"");

            //            buffer.append("\n");
        }
        //        write(context, buffer.toString().getBytes(), "text/csv");
        msexWbook.write();
        msexWbook.close();
        writeFile(context, new FileInputStream(tmpFile), "WalletTransactions.xls", null, (int) FileUtilities.getFileSize(strTmpFileName));
    }

    /**
     * <p></p>
     *
     * @param piWalletType
     * @param plWalletRef
     * @return
     */
    private String getWalletName(final int piWalletType, final long plWalletRef) {
        ShopsDAO daoShop;
        VolunteersDAO daoVolunteer;
        StringBuffer auxSb;
        String retVal;
        try {
            if (WalletType.Shop.getValue() == piWalletType) {
                daoShop = BaseContainer.getShopFindByWallet(plWalletRef);
                if (daoShop != null) {
                    retVal = daoShop.getName();
                } else {
                    retVal = "UNKNOWN SHOP";
                }
            } else if (WalletType.Volunteer.getValue() == piWalletType) {
                daoVolunteer = BaseContainer.getVolunteerFindByWallet(plWalletRef);
                if (daoVolunteer != null) {
                    auxSb = new StringBuffer(daoVolunteer.getFirstName()).append(" ").append(daoVolunteer.getLastName());
                    retVal = auxSb.toString();
                } else {
                    retVal = "UNKNOWN VOLUNTEER";
                }
            } else {
                retVal = WalletType.getByValue(piWalletType).getName();
            }
        } catch (Exception ex) {
            retVal = "UNKNOWN";
        }
        return retVal;
    }

}
