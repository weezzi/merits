package com.merits.modules.base.container;

// IMPORTS ---------------------------------------------------------------------


import com.weezzi.core.containers.QueriesUpdaterContainer;
import com.weezzi.core.hotdeploy.data.WeezziSiteClassLoader;
import com.weezzi.core.dbmanager.GlobalDBManager;
import com.weezzi.core.dbmanager.exceptions.NoDataFoundException;
import com.weezzi.core.dbmanager.exceptions.SQLExecutionException;
import com.weezzi.core.dbmanager.dao.SingleRecordDAO;
import com.weezzi.core.dbmanager.dao.BulkDAO;
import com.weezzi.core.dbmanager.dao.ListDAO;
import com.weezzi.core.dbmanager.dao.TreeDAO;
import com.weezzi.core.dbmanager.dao.SpecialQueryDAO;
import com.weezzi.core.dbmanager.dao.DAOInstantParameters;
import com.weezzi.core.dbmanager.querybuilder.QueryBuilder;
import com.weezzi.utils.extras.console.Console;
import com.weezzi.utils.extras.console.annotations.WConsole;
import com.weezzi.utils.extras.cache.WeezziCacheableObjectInterface;
import com.weezzi.utils.extras.cache.data.*;
import com.weezzi.utils.extras.cache.datasource.CacheDataSource;
import com.weezzi.utils.DatabaseType;
import com.weezzi.core.data.*;
import com.merits.modules.base.dao.WalletsDAO;
import com.merits.modules.base.dao.BulkWalletsDAO;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.merits.modules.base.uobjects.enums.IdcardType;
import com.merits.modules.base.dao.WalletRecordsDAO;
import com.merits.modules.base.dao.BulkWalletRecordsDAO;
import com.merits.modules.base.dao.WalletRecordsGetBalanceSPQ;
import com.merits.modules.base.dao.WalletRecordsTotalsSPQ;
import com.merits.modules.base.dao.BulkWalletRecordsTotalsSPQ;
import com.merits.modules.base.dao.WalletRecordsMasterWalletSPQ;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.merits.modules.base.uobjects.enums.WalletOperation;
import com.merits.modules.base.uobjects.enums.WalletType;
import com.merits.modules.base.dao.GoodTypesDAO;
import com.merits.modules.base.dao.BulkGoodTypesDAO;
import com.merits.modules.base.lists.GoodTypesListGoodTypes;
import com.merits.modules.base.dao.VolunteersDAO;
import com.merits.modules.base.dao.BulkVolunteersDAO;
import com.merits.modules.base.dao.VolunteersGetAllUsersSPQ;
import com.merits.modules.base.dao.BulkVolunteersGetAllUsersSPQ;
import com.merits.modules.base.dao.VolunteersUsersSPQ;
import com.merits.modules.base.dao.BulkVolunteersUsersSPQ;
import com.merits.modules.base.lists.VolunteersListVolunteers;
import com.merits.modules.base.uobjects.enums.IdcardType;
import com.merits.modules.base.dao.ShopsDAO;
import com.merits.modules.base.dao.BulkShopsDAO;
import com.merits.modules.base.lists.ShopsListShops;
import com.merits.modules.base.dao.ShopCashiersDAO;
import com.merits.modules.base.dao.BulkShopCashiersDAO;
import com.merits.modules.base.dao.ShopGoodtypesDAO;
import com.merits.modules.base.dao.BulkShopGoodtypesDAO;
import com.merits.modules.base.dao.ShopGoodtypesShopGoodSPQ;
import com.merits.modules.base.dao.BulkShopGoodtypesShopGoodSPQ;
import com.merits.modules.base.dao.ShopTransactionsDAO;
import com.merits.modules.base.dao.BulkShopTransactionsDAO;
import com.merits.modules.base.dao.OrganizationsDAO;
import com.merits.modules.base.dao.BulkOrganizationsDAO;
import com.merits.modules.base.lists.OrganizationsListOrganizations;
import com.merits.modules.base.dao.PaymentsCodeDAO;
import com.merits.modules.base.dao.BulkPaymentsCodeDAO;
import com.merits.modules.base.uobjects.enums.PaymentCodeStatus;
import com.merits.modules.base.dao.PaymentsRequestsDAO;
import com.merits.modules.base.dao.BulkPaymentsRequestsDAO;
import com.merits.modules.base.uobjects.enums.PaymentRequestStatus;
import com.merits.modules.base.dao.ShopTransactionsGoodsDAO;
import com.merits.modules.base.dao.BulkShopTransactionsGoodsDAO;
import com.merits.modules.base.dao.CountriesDAO;
import com.merits.modules.base.dao.BulkCountriesDAO;
import com.merits.modules.base.dao.CitiesDAO;
import com.merits.modules.base.dao.BulkCitiesDAO;
import com.merits.modules.base.dao.TeamDAO;
import com.merits.modules.base.dao.BulkTeamDAO;
import com.merits.modules.base.dao.SponsorsDAO;
import com.merits.modules.base.dao.BulkSponsorsDAO;
import com.merits.modules.base.dao.CompaniesDAO;
import com.merits.modules.base.dao.BulkCompaniesDAO;
import com.merits.modules.base.dao.ProjectsDAO;
import com.merits.modules.base.dao.BulkProjectsDAO;


import java.util.HashMap;


/**
 * <b>Title: </b>Base DataSource<br/>
 * <b>Description: </b>Base DataSource Class<br/>
 *
 * @author AUTO-GENERATED By Weezzi Builder
 * @version 1.0
 */
@WConsole (name = "BaseDatasource")
@SuppressWarnings("unused")
public class BaseDatasource extends CacheDataSource {


    // CONSTANTS ---------------------------------------------------------------



	private static long siteId;
	
    
    // STATIC -----------------------------------------------------------------
    
    
    static {
    	if (BaseDatasource.class.getClassLoader() instanceof WeezziSiteClassLoader) {
    		WeezziSiteClassLoader classLoader = (WeezziSiteClassLoader) BaseDatasource.class.getClassLoader();
    		siteId = classLoader.getSiteId();
    	} else {
    		siteId = 0;
    	}
    }

	
    // PROPERTIES --------------------------------------------------------------




    // CONSTRUCTORS ------------------------------------------------------------


    /**
     * Default Constructor
     */
    public BaseDatasource() {
        // Invoke DataSource Constructor
    }


    // PUBLIC ------------------------------------------------------------------


    /**
     * Get Object data
     * @param key
     * @return
     */
    public WeezziCacheableObjectInterface getData(Object key) throws Exception {
    	// Local Variables
    	Object[] searchFields;
        // SINGLE Getter
        if (key instanceof SingleRecordDAO) {
            // WALLETS
            if(key instanceof WalletsDAO) {
                // Get Wallet DAO
                WalletsDAO wallets = (WalletsDAO) key;
                // Get search fields
                searchFields = wallets.getParameters().getSearchFields();
                // Check request type
                // Get Wallet by Id
                if (wallets.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getWallet((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((WalletsDAO.SearchType) wallets.getSearchType()) {
                    // Get Name Description Wallet
                    case MasterWallet:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getWalletFindByMasterWallet();
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // WALLET RECORDS
            if(key instanceof WalletRecordsDAO) {
                // Get Wallet Record DAO
                WalletRecordsDAO walletRecords = (WalletRecordsDAO) key;
                // Get search fields
                searchFields = walletRecords.getParameters().getSearchFields();
                // Check request type
                // Get Wallet Record by Id
                if (walletRecords.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getWalletRecord((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((WalletRecordsDAO.SearchType) walletRecords.getSearchType()) {
                    // Get Name Description Wallet Record
                    case Transaction:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getWalletRecordFindByTransaction((Long) searchFields[0], (Long) searchFields[1]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // GOOD TYPES
            if(key instanceof GoodTypesDAO) {
                // Get Good Type DAO
                GoodTypesDAO goodTypes = (GoodTypesDAO) key;
                // Get search fields
                searchFields = goodTypes.getParameters().getSearchFields();
                // Check request type
                // Get Good Type by Id
                if (goodTypes.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getGoodType((Long) searchFields[0], (String) searchFields[1]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((GoodTypesDAO.SearchType) goodTypes.getSearchType()) {
                }
            }
            // VOLUNTEERS
            if(key instanceof VolunteersDAO) {
                // Get Volunteer DAO
                VolunteersDAO volunteers = (VolunteersDAO) key;
                // Get search fields
                searchFields = volunteers.getParameters().getSearchFields();
                // Check request type
                // Get Volunteer by Id
                if (volunteers.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getVolunteer((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((VolunteersDAO.SearchType) volunteers.getSearchType()) {
                    // Get Name Description Volunteer
                    case Login:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getVolunteerFindByLogin((String) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                    // Get Name Description Volunteer
                    case Wallet:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getVolunteerFindByWallet((Long) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // SHOPS
            if(key instanceof ShopsDAO) {
                // Get Shop DAO
                ShopsDAO shops = (ShopsDAO) key;
                // Get search fields
                searchFields = shops.getParameters().getSearchFields();
                // Check request type
                // Get Shop by Id
                if (shops.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getShop((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((ShopsDAO.SearchType) shops.getSearchType()) {
                    // Get Name Description Shop
                    case Wallet:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getShopFindByWallet((Long) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // SHOP CASHIERS
            if(key instanceof ShopCashiersDAO) {
                // Get Shop Cashier DAO
                ShopCashiersDAO shopCashiers = (ShopCashiersDAO) key;
                // Get search fields
                searchFields = shopCashiers.getParameters().getSearchFields();
                // Check request type
                // Get Shop Cashier by Id
                if (shopCashiers.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getShopCashier((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((ShopCashiersDAO.SearchType) shopCashiers.getSearchType()) {
                    // Get Name Description Shop Cashier
                    case Username:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getShopCashierFindByUsername((Long) searchFields[0], (String) searchFields[1]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // SHOP GOODTYPES
            if(key instanceof ShopGoodtypesDAO) {
                // Get Shop Goodtype DAO
                ShopGoodtypesDAO shopGoodtypes = (ShopGoodtypesDAO) key;
                // Get search fields
                searchFields = shopGoodtypes.getParameters().getSearchFields();
                // Check request type
                // Get Shop Goodtype by Id
                if (shopGoodtypes.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getShopGoodtype((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((ShopGoodtypesDAO.SearchType) shopGoodtypes.getSearchType()) {
                    // Get Name Description Shop Goodtype
                    case Check:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getShopGoodtypeFindByCheck((Long) searchFields[0], (Long) searchFields[1]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // SHOP TRANSACTIONS
            if(key instanceof ShopTransactionsDAO) {
                // Get Shop Transaction DAO
                ShopTransactionsDAO shopTransactions = (ShopTransactionsDAO) key;
                // Get search fields
                searchFields = shopTransactions.getParameters().getSearchFields();
                // Check request type
                // Get Shop Transaction by Id
                if (shopTransactions.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getShopTransaction((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((ShopTransactionsDAO.SearchType) shopTransactions.getSearchType()) {
                    // Get Name Description Shop Transaction
                    case VolunteerWallet:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getShopTransactionFindByVolunteerWallet((Long) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // ORGANIZATIONS
            if(key instanceof OrganizationsDAO) {
                // Get Organization DAO
                OrganizationsDAO organizations = (OrganizationsDAO) key;
                // Get search fields
                searchFields = organizations.getParameters().getSearchFields();
                // Check request type
                // Get Organization by Id
                if (organizations.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getOrganization((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((OrganizationsDAO.SearchType) organizations.getSearchType()) {
                    // Get Name Description Organization
                    case WalletId:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getOrganizationFindByWalletId((Long) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // PAYMENTS CODE
            if(key instanceof PaymentsCodeDAO) {
                // Get Payments Code DAO
                PaymentsCodeDAO paymentsCode = (PaymentsCodeDAO) key;
                // Get search fields
                searchFields = paymentsCode.getParameters().getSearchFields();
                // Check request type
                // Get Payments Code by Id
                if (paymentsCode.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getPaymentsCode((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((PaymentsCodeDAO.SearchType) paymentsCode.getSearchType()) {
                    // Get Name Description Payments Code
                    case GetPaymentCode:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getPaymentsCodeFindByGetPaymentCode((String) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                    // Get Name Description Payments Code
                    case GetLatest:
                        // Get DAO Data
                        try {
                            // Call Method
                            return getPaymentsCodeFindByGetLatest((Long) searchFields[0]);
                        } catch(NoDataFoundException ex) {
                            // Return empty data
                            return null;
                        } catch(Exception ex) {
                            // Throw Exception
                            throw ex;
                        }
                }
            }
            // PAYMENTS REQUESTS
            if(key instanceof PaymentsRequestsDAO) {
                // Get Payments Request DAO
                PaymentsRequestsDAO paymentsRequests = (PaymentsRequestsDAO) key;
                // Get search fields
                searchFields = paymentsRequests.getParameters().getSearchFields();
                // Check request type
                // Get Payments Request by Id
                if (paymentsRequests.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getPaymentsRequest((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((PaymentsRequestsDAO.SearchType) paymentsRequests.getSearchType()) {
                }
            }
            // SHOP TRANSACTIONS GOODS
            if(key instanceof ShopTransactionsGoodsDAO) {
                // Get Shop Transactions Good DAO
                ShopTransactionsGoodsDAO shopTransactionsGoods = (ShopTransactionsGoodsDAO) key;
                // Get search fields
                searchFields = shopTransactionsGoods.getParameters().getSearchFields();
                // Check request type
                // Get Shop Transactions Good by Id
                if (shopTransactionsGoods.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getShopTransactionsGood((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((ShopTransactionsGoodsDAO.SearchType) shopTransactionsGoods.getSearchType()) {
                }
            }
            // COUNTRIES
            if(key instanceof CountriesDAO) {
                // Get Country DAO
                CountriesDAO countries = (CountriesDAO) key;
                // Get search fields
                searchFields = countries.getParameters().getSearchFields();
                // Check request type
                // Get Country by Id
                if (countries.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getCountry((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((CountriesDAO.SearchType) countries.getSearchType()) {
                }
            }
            // CITIES
            if(key instanceof CitiesDAO) {
                // Get City DAO
                CitiesDAO cities = (CitiesDAO) key;
                // Get search fields
                searchFields = cities.getParameters().getSearchFields();
                // Check request type
                // Get City by Id
                if (cities.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getCity((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((CitiesDAO.SearchType) cities.getSearchType()) {
                }
            }
            // TEAM
            if(key instanceof TeamDAO) {
                // Get Team DAO
                TeamDAO team = (TeamDAO) key;
                // Get search fields
                searchFields = team.getParameters().getSearchFields();
                // Check request type
                // Get Team by Id
                if (team.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getTeam((Long) searchFields[0], (String) searchFields[1]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((TeamDAO.SearchType) team.getSearchType()) {
                }
            }
            // SPONSORS
            if(key instanceof SponsorsDAO) {
                // Get Sponsor DAO
                SponsorsDAO sponsors = (SponsorsDAO) key;
                // Get search fields
                searchFields = sponsors.getParameters().getSearchFields();
                // Check request type
                // Get Sponsor by Id
                if (sponsors.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getSponsor((Long) searchFields[0]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((SponsorsDAO.SearchType) sponsors.getSearchType()) {
                }
            }
            // COMPANIES
            if(key instanceof CompaniesDAO) {
                // Get Company DAO
                CompaniesDAO companies = (CompaniesDAO) key;
                // Get search fields
                searchFields = companies.getParameters().getSearchFields();
                // Check request type
                // Get Company by Id
                if (companies.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getCompany((Long) searchFields[0], (String) searchFields[1]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((CompaniesDAO.SearchType) companies.getSearchType()) {
                }
            }
            // PROJECTS
            if(key instanceof ProjectsDAO) {
                // Get Project DAO
                ProjectsDAO projects = (ProjectsDAO) key;
                // Get search fields
                searchFields = projects.getParameters().getSearchFields();
                // Check request type
                // Get Project by Id
                if (projects.getSearchType() == null) {
                    // Get DAO Data
                    try {
                        // Call Method
                        return getProject((Long) searchFields[0], (String) searchFields[1]);
                    } catch(NoDataFoundException ex) {
                        // Return empty data
                        return null;
                    } catch(Exception ex) {
                        // Throw exception
                        throw ex;
                    }
                }
                // Check other queries
                switch((ProjectsDAO.SearchType) projects.getSearchType()) {
                }
            }
        }
        // SPECIAL QUERIES Simple Getters
        if (key instanceof SpecialQueryDAO) {
            // WALLET RECORDS
            if(key instanceof WalletRecordsGetBalanceSPQ) {
                // Get Wallet Record DAO
                WalletRecordsGetBalanceSPQ specialQuery = (WalletRecordsGetBalanceSPQ) key;
                // Get search fields
                searchFields = specialQuery.getParameters().getSearchFields();
                // Get DTO Data
                try {
                    // Call Method
                    return getWalletRecordsFindByGetBalanceSPQ((Long) searchFields[0]);
                } catch(NoDataFoundException ex) {
                    // Return empty data
                    return null;
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // WALLET RECORDS
            if(key instanceof WalletRecordsMasterWalletSPQ) {
                // Get Wallet Record DAO
                WalletRecordsMasterWalletSPQ specialQuery = (WalletRecordsMasterWalletSPQ) key;
                // Get search fields
                searchFields = specialQuery.getParameters().getSearchFields();
                // Get DTO Data
                try {
                    // Call Method
                    return getWalletRecordsFindByMasterWalletSPQ((Long) searchFields[0]);
                } catch(NoDataFoundException ex) {
                    // Return empty data
                    return null;
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
        }
        // BULK Getter
        if (key instanceof BulkDAO) {
            // Bulk Getters
            // WALLET RECORDS
            if(key instanceof BulkWalletRecordsDAO) {
                // Get Wallet Record Bulk DAO
                BulkWalletRecordsDAO bulkDAO = (BulkWalletRecordsDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkWalletRecordsDAO.SearchType) bulkDAO.getSearchType()) {
                    case Transactions:
                        // Get Bulk Data
                        try {
                            return getWalletRecordsFindByTransactions((Long) searchFields[0], (Long) searchFields[1]);
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                    case All:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getWalletRecordsFindByAll((Long) searchFields[0], (Long) searchFields[1], (String) searchFields[2], (String) searchFields[3], (String) searchFields[4]);
                            } else {
                                return getWalletRecordsBlockFindByAll((Long) searchFields[0], (Long) searchFields[1], (String) searchFields[2], (String) searchFields[3], (String) searchFields[4], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // WALLET RECORDS
            if(key instanceof BulkWalletRecordsTotalsSPQ) {
                // Get Wallet Record DAO
                BulkWalletRecordsTotalsSPQ specialQuery = (BulkWalletRecordsTotalsSPQ) key;
                // Get DTO Data
                try {
                    // Call Method
                    return getWalletRecordsFindByTotalsSPQ();
                } catch(NoDataFoundException ex) {
                    // Return empty data
                    return null;
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // GOOD TYPES
            if(key instanceof BulkGoodTypesDAO) {
                // Get Good Type Bulk DAO
                BulkGoodTypesDAO bulkDAO = (BulkGoodTypesDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkGoodTypesDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            return getGoodTypesFindByAll((String) searchFields[0]);
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // VOLUNTEERS
            if(key instanceof BulkVolunteersDAO) {
                // Get Volunteer Bulk DAO
                BulkVolunteersDAO bulkDAO = (BulkVolunteersDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkVolunteersDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getVolunteersFindByAll((String) searchFields[0]);
                            } else {
                                return getVolunteersBlockFindByAll((String) searchFields[0], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // VOLUNTEERS
            if(key instanceof BulkVolunteersGetAllUsersSPQ) {
                // Get Volunteer DAO
                BulkVolunteersGetAllUsersSPQ specialQuery = (BulkVolunteersGetAllUsersSPQ) key;
                // Get DTO Data
                try {
                    // Call Method
                    return getVolunteersFindByGetAllUsersSPQ();
                } catch(NoDataFoundException ex) {
                    // Return empty data
                    return null;
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // VOLUNTEERS
            if(key instanceof BulkVolunteersUsersSPQ) {
                // Get Volunteer DAO
                BulkVolunteersUsersSPQ specialQuery = (BulkVolunteersUsersSPQ) key;
                // Get search fields
                searchFields = specialQuery.getParameters().getSearchFields();
                // Get DTO Data
                try {
                    // Call Method
                    return getVolunteersFindByUsersSPQ((String) searchFields[0]);
                } catch(NoDataFoundException ex) {
                    // Return empty data
                    return null;
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // SHOPS
            if(key instanceof BulkShopsDAO) {
                // Get Shop Bulk DAO
                BulkShopsDAO bulkDAO = (BulkShopsDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkShopsDAO.SearchType) bulkDAO.getSearchType()) {
                    case GetAll:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getShopsFindByGetAll((String) searchFields[0]);
                            } else {
                                return getShopsBlockFindByGetAll((String) searchFields[0], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // SHOP CASHIERS
            if(key instanceof BulkShopCashiersDAO) {
                // Get Shop Cashier Bulk DAO
                BulkShopCashiersDAO bulkDAO = (BulkShopCashiersDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkShopCashiersDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            return getShopCashiersFindByAll((Long) searchFields[0]);
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // SHOP GOODTYPES
            if(key instanceof BulkShopGoodtypesDAO) {
                // Get Shop Goodtype Bulk DAO
                BulkShopGoodtypesDAO bulkDAO = (BulkShopGoodtypesDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkShopGoodtypesDAO.SearchType) bulkDAO.getSearchType()) {
                    case GoodTypes:
                        // Get Bulk Data
                        try {
                            return getShopGoodtypesFindByGoodTypes((Long) searchFields[0]);
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // SHOP GOODTYPES
            if(key instanceof BulkShopGoodtypesShopGoodSPQ) {
                // Get Shop Goodtype DAO
                BulkShopGoodtypesShopGoodSPQ specialQuery = (BulkShopGoodtypesShopGoodSPQ) key;
                // Get search fields
                searchFields = specialQuery.getParameters().getSearchFields();
                // Get DTO Data
                try {
                    // Call Method
                    return getShopGoodtypesFindByShopGoodSPQ((Long) searchFields[0], (String) searchFields[1]);
                } catch(NoDataFoundException ex) {
                    // Return empty data
                    return null;
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // SHOP TRANSACTIONS
            if(key instanceof BulkShopTransactionsDAO) {
                // Get Shop Transaction Bulk DAO
                BulkShopTransactionsDAO bulkDAO = (BulkShopTransactionsDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkShopTransactionsDAO.SearchType) bulkDAO.getSearchType()) {
                    case Shop:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getShopTransactionsFindByShop((Long) searchFields[0]);
                            } else {
                                return getShopTransactionsBlockFindByShop((Long) searchFields[0], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                    case ShopCashier:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getShopTransactionsFindByShopCashier((Long) searchFields[0], (Long) searchFields[1]);
                            } else {
                                return getShopTransactionsBlockFindByShopCashier((Long) searchFields[0], (Long) searchFields[1], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // ORGANIZATIONS
            if(key instanceof BulkOrganizationsDAO) {
                // Get Organization Bulk DAO
                BulkOrganizationsDAO bulkDAO = (BulkOrganizationsDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkOrganizationsDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            return getOrganizationsFindByAll();
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // COUNTRIES
            if(key instanceof BulkCountriesDAO) {
                // Get Country Bulk DAO
                BulkCountriesDAO bulkDAO = (BulkCountriesDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkCountriesDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            return getCountriesFindByAll();
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // CITIES
            if(key instanceof BulkCitiesDAO) {
                // Get City Bulk DAO
                BulkCitiesDAO bulkDAO = (BulkCitiesDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkCitiesDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            return getCitiesFindByAll((Long) searchFields[0]);
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // TEAM
            if(key instanceof BulkTeamDAO) {
                // Get Team Bulk DAO
                BulkTeamDAO bulkDAO = (BulkTeamDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkTeamDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            return getTeamFindByAll((String) searchFields[0]);
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // SPONSORS
            if(key instanceof BulkSponsorsDAO) {
                // Get Sponsor Bulk DAO
                BulkSponsorsDAO bulkDAO = (BulkSponsorsDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkSponsorsDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getSponsorsFindByAll((String) searchFields[0]);
                            } else {
                                return getSponsorsBlockFindByAll((String) searchFields[0], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // COMPANIES
            if(key instanceof BulkCompaniesDAO) {
                // Get Company Bulk DAO
                BulkCompaniesDAO bulkDAO = (BulkCompaniesDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkCompaniesDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getCompaniesFindByAll((String) searchFields[0], (String) searchFields[1]);
                            } else {
                                return getCompaniesBlockFindByAll((String) searchFields[0], (String) searchFields[1], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
            // PROJECTS
            if(key instanceof BulkProjectsDAO) {
                // Get Project Bulk DAO
                BulkProjectsDAO bulkDAO = (BulkProjectsDAO) key;
                // Get search fields
                searchFields = bulkDAO.getParameters().getSearchFields();
                // Check query type
                switch((BulkProjectsDAO.SearchType) bulkDAO.getSearchType()) {
                    case All:
                        // Get Bulk Data
                        try {
                            // Call Method
                            if (!bulkDAO.isBlockData()) {
                                return getProjectsFindByAll((String) searchFields[0]);
                            } else {
                                return getProjectsBlockFindByAll((String) searchFields[0], bulkDAO.getBlockOffset(), bulkDAO.getBlockOffset() + bulkDAO.getBlockSize());
                            }
                        } catch(Exception ex) {
                            // Throw exception
                            throw ex;
                        }
                }
            }
        }
        // LIST Getter
        if (key instanceof ListDAO) {
            // Check Search Type
            // GOOD TYPES
            if(key instanceof GoodTypesListGoodTypes) {
                // Get Good Types Good Types List
                GoodTypesListGoodTypes list = (GoodTypesListGoodTypes) key;
                // Get search fields
                searchFields = list.getParameters().getSearchFields();
                try {
                    // Call Method
                    return getGoodTypesListGoodTypes();
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // Check Search Type
            // VOLUNTEERS
            if(key instanceof VolunteersListVolunteers) {
                // Get Volunteers Volunteers List
                VolunteersListVolunteers list = (VolunteersListVolunteers) key;
                // Get search fields
                searchFields = list.getParameters().getSearchFields();
                try {
                    // Call Method
                    return getVolunteersListVolunteers();
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // Check Search Type
            // SHOPS
            if(key instanceof ShopsListShops) {
                // Get Shops Shops List
                ShopsListShops list = (ShopsListShops) key;
                // Get search fields
                searchFields = list.getParameters().getSearchFields();
                try {
                    // Call Method
                    return getShopsListShops();
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
            // Check Search Type
            // ORGANIZATIONS
            if(key instanceof OrganizationsListOrganizations) {
                // Get Organizations Organizations List
                OrganizationsListOrganizations list = (OrganizationsListOrganizations) key;
                // Get search fields
                searchFields = list.getParameters().getSearchFields();
                try {
                    // Call Method
                    return getOrganizationsListOrganizations();
                } catch(Exception ex) {
                    // Throw Exception
                    throw ex;
                }
            }
        }
        // TREE Getter
        if (key instanceof TreeDAO) {
        }
        // Invalid Object Type
        Console.error("BaseDatasource does not have defined method for <" + key.getClass().getName() + "> object");
        // Return Null Result
        return null;
    }


    // SIMPLE GETTERS ---------------------------------------------------------
    /**
     * Gets a Wallet with a given identifier
     * @param id long Wallet Identifier
     * @return WalletsDAO Wallet Data Transfer Object
     */
    public WalletsDAO getWallet(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        WalletsDAO dao;
        // Build Query
        queryStr = "SELECT WALLETS.*\r\n " + 
			"FROM WALLETS\r\n     " + 
			"WHERE WALLETS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new WalletsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Wallet
     * @return WalletsDAO Wallet Data Transfer Object
     */
    public WalletsDAO getWalletFindByMasterWallet() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        WalletsDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create DTO
        dto =  new WalletsDAO(WalletsDAO.SearchType.MasterWallet);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Wallets_MasterWallet", 
                                 "SELECT * FROM WALLETS \r\n " + 
                                 "WHERE WALLET_TYPE = 1      "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Wallet Record with a given identifier
     * @param id long Wallet Record Identifier
     * @return WalletRecordsDAO Wallet Record Data Transfer Object
     */
    public WalletRecordsDAO getWalletRecord(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        WalletRecordsDAO dao;
        // Build Query
        queryStr = "SELECT WALLET_RECORDS.*\r\n " + 
			"FROM WALLET_RECORDS\r\n     " + 
			"WHERE WALLET_RECORDS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new WalletRecordsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Wallet Record
     * @param id long Wallet Records Identifier
     * @param idWallet long Wallet Records Wallet Identifier
     * @return WalletRecordsDAO Wallet Record Data Transfer Object
     */
    public WalletRecordsDAO getWalletRecordFindByTransaction(long id, long idWallet) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        WalletRecordsDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        WalletRecordsDAO.TransactionParameters parameters;
        // Create DTO
        dto =  new WalletRecordsDAO(WalletRecordsDAO.SearchType.Transaction);
        // Create Parameters
        parameters = dto.new TransactionParameters(id, idWallet);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("ID", 1);
        parameterNames.put("IDWALLET", 2);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_Transaction", 
                                 "SELECT WALLET_RECORDS.*\r\n" + 
"FROM WALLET_RECORDS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        WALLET_RECORDS.ID = ?ID " + 
                                 "        AND WALLET_RECORDS.ID_WALLET = ?IDWALLET "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, id, idWallet);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Good Type with a given identifier
     * @param id long null
     * @param langCode String Good Type Identifier
     * @return GoodTypesDAO Good Type Data Transfer Object
     */
    public GoodTypesDAO getGoodType(long id, String langCode) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        GoodTypesDAO dao;
        // Build Query
        queryStr = "SELECT GOOD_TYPES.*, \r\n " + 
			"       multilang_translations.SMALL_TEXT1 NAME\r\n " + 
			"FROM GOOD_TYPES\r\n " + 
			"LEFT JOIN `weezziserver`.`multilang_translations` ON (GOOD_TYPES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = \"" + langCode + "\")\r\n     " + 
			"WHERE GOOD_TYPES.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new GoodTypesDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id, langCode));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Volunteer with a given identifier
     * @param id long Volunteer Identifier
     * @return VolunteersDAO Volunteer Data Transfer Object
     */
    public VolunteersDAO getVolunteer(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        VolunteersDAO dao;
        // Build Query
        queryStr = "SELECT VOLUNTEERS.*\r\n " + 
			"FROM VOLUNTEERS\r\n     " + 
			"WHERE VOLUNTEERS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new VolunteersDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Volunteer
     * @param loginEmail String Volunteers Login Email
     * @return VolunteersDAO Volunteer Data Transfer Object
     */
    public VolunteersDAO getVolunteerFindByLogin(String loginEmail) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        VolunteersDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        VolunteersDAO.LoginParameters parameters;
        // Create DTO
        dto =  new VolunteersDAO(VolunteersDAO.SearchType.Login);
        // Create Parameters
        parameters = dto.new LoginParameters(loginEmail);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LOGINEMAIL", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Volunteers_Login", 
                                 "SELECT VOLUNTEERS.*\r\n" + 
"FROM VOLUNTEERS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        VOLUNTEERS.LOGIN_EMAIL = ?LOGINEMAIL "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, loginEmail);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Volunteer
     * @param idWallet long Volunteers Wallet Identifier
     * @return VolunteersDAO Volunteer Data Transfer Object
     */
    public VolunteersDAO getVolunteerFindByWallet(long idWallet) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        VolunteersDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        VolunteersDAO.WalletParameters parameters;
        // Create DTO
        dto =  new VolunteersDAO(VolunteersDAO.SearchType.Wallet);
        // Create Parameters
        parameters = dto.new WalletParameters(idWallet);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDWALLET", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Volunteers_Wallet", 
                                 "SELECT VOLUNTEERS.*\r\n" + 
"FROM VOLUNTEERS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        VOLUNTEERS.ID_WALLET = ?IDWALLET "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idWallet);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop with a given identifier
     * @param id long Shop Identifier
     * @return ShopsDAO Shop Data Transfer Object
     */
    public ShopsDAO getShop(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        ShopsDAO dao;
        // Build Query
        queryStr = "SELECT SHOPS.*\r\n " + 
			"FROM SHOPS\r\n     " + 
			"WHERE SHOPS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new ShopsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop
     * @param idWallet long Shops Wallet Identifier
     * @return ShopsDAO Shop Data Transfer Object
     */
    public ShopsDAO getShopFindByWallet(long idWallet) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        ShopsDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        ShopsDAO.WalletParameters parameters;
        // Create DTO
        dto =  new ShopsDAO(ShopsDAO.SearchType.Wallet);
        // Create Parameters
        parameters = dto.new WalletParameters(idWallet);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDWALLET", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Shops_Wallet", 
                                 "SELECT SHOPS.*\r\n" + 
"FROM SHOPS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        SHOPS.ID_WALLET = ?IDWALLET "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idWallet);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Cashier with a given identifier
     * @param id long Shop Cashier Identifier
     * @return ShopCashiersDAO Shop Cashier Data Transfer Object
     */
    public ShopCashiersDAO getShopCashier(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        ShopCashiersDAO dao;
        // Build Query
        queryStr = "SELECT SHOP_CASHIERS.*\r\n " + 
			"FROM SHOP_CASHIERS\r\n     " + 
			"WHERE SHOP_CASHIERS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new ShopCashiersDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Cashier
     * @param idShop long Shop Cashiers Shop Identifier
     * @param loginUsername String Shop Cashiers Login Username
     * @return ShopCashiersDAO Shop Cashier Data Transfer Object
     */
    public ShopCashiersDAO getShopCashierFindByUsername(long idShop, String loginUsername) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        ShopCashiersDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        ShopCashiersDAO.UsernameParameters parameters;
        // Create DTO
        dto =  new ShopCashiersDAO(ShopCashiersDAO.SearchType.Username);
        // Create Parameters
        parameters = dto.new UsernameParameters(idShop, loginUsername);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        parameterNames.put("LOGINUSERNAME", 2);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopCashiers_Username", 
                                 "SELECT SHOP_CASHIERS.*\r\n" + 
"FROM SHOP_CASHIERS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        SHOP_CASHIERS.ID_SHOP = ?IDSHOP " + 
                                 "        AND SHOP_CASHIERS.LOGIN_USERNAME = ?LOGINUSERNAME "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idShop, loginUsername);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Goodtype with a given identifier
     * @param id long Shop Goodtype Identifier
     * @return ShopGoodtypesDAO Shop Goodtype Data Transfer Object
     */
    public ShopGoodtypesDAO getShopGoodtype(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        ShopGoodtypesDAO dao;
        // Build Query
        queryStr = "SELECT SHOP_GOODTYPES.*\r\n " + 
			"FROM SHOP_GOODTYPES\r\n     " + 
			"WHERE SHOP_GOODTYPES.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new ShopGoodtypesDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Goodtype
     * @param idShop long Shop Goodtypes Shop Identifier
     * @param idGoodtype long Shop Goodtypes Goodtype Identifier
     * @return ShopGoodtypesDAO Shop Goodtype Data Transfer Object
     */
    public ShopGoodtypesDAO getShopGoodtypeFindByCheck(long idShop, long idGoodtype) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        ShopGoodtypesDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        ShopGoodtypesDAO.CheckParameters parameters;
        // Create DTO
        dto =  new ShopGoodtypesDAO(ShopGoodtypesDAO.SearchType.Check);
        // Create Parameters
        parameters = dto.new CheckParameters(idShop, idGoodtype);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        parameterNames.put("IDGOODTYPE", 2);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopGoodtypes_Check", 
                                 "SELECT SHOP_GOODTYPES.*\r\n" + 
"FROM SHOP_GOODTYPES\r\n" + 
                                 "WHERE \r\n" + 
                                 "        SHOP_GOODTYPES.ID_SHOP = ?IDSHOP " + 
                                 "        AND SHOP_GOODTYPES.ID_GOODTYPE = ?IDGOODTYPE "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idShop, idGoodtype);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Transaction with a given identifier
     * @param id long Shop Transaction Identifier
     * @return ShopTransactionsDAO Shop Transaction Data Transfer Object
     */
    public ShopTransactionsDAO getShopTransaction(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        ShopTransactionsDAO dao;
        // Build Query
        queryStr = "SELECT SHOP_TRANSACTIONS.*\r\n " + 
			"FROM SHOP_TRANSACTIONS\r\n     " + 
			"WHERE SHOP_TRANSACTIONS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new ShopTransactionsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Transaction
     * @param idVolunteerWalletRecord long Shop Transactions Volunteer Wallet Record Identifier
     * @return ShopTransactionsDAO Shop Transaction Data Transfer Object
     */
    public ShopTransactionsDAO getShopTransactionFindByVolunteerWallet(long idVolunteerWalletRecord) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        ShopTransactionsDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        ShopTransactionsDAO.VolunteerWalletParameters parameters;
        // Create DTO
        dto =  new ShopTransactionsDAO(ShopTransactionsDAO.SearchType.VolunteerWallet);
        // Create Parameters
        parameters = dto.new VolunteerWalletParameters(idVolunteerWalletRecord);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDVOLUNTEERWALLETRECORD", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopTransactions_VolunteerWallet", 
                                 "SELECT SHOP_TRANSACTIONS.*\r\n" + 
"FROM SHOP_TRANSACTIONS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        SHOP_TRANSACTIONS.ID_VOLUNTEER_WALLET_RECORD = ?IDVOLUNTEERWALLETRECORD "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idVolunteerWalletRecord);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Organization with a given identifier
     * @param id long Organization Identifier
     * @return OrganizationsDAO Organization Data Transfer Object
     */
    public OrganizationsDAO getOrganization(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        OrganizationsDAO dao;
        // Build Query
        queryStr = "SELECT ORGANIZATIONS.*\r\n " + 
			"FROM ORGANIZATIONS\r\n     " + 
			"WHERE ORGANIZATIONS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new OrganizationsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Organization
     * @param idWallet long Organizations Wallet Identifier
     * @return OrganizationsDAO Organization Data Transfer Object
     */
    public OrganizationsDAO getOrganizationFindByWalletId(long idWallet) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        OrganizationsDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        OrganizationsDAO.WalletIdParameters parameters;
        // Create DTO
        dto =  new OrganizationsDAO(OrganizationsDAO.SearchType.WalletId);
        // Create Parameters
        parameters = dto.new WalletIdParameters(idWallet);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDWALLET", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Organizations_WalletId", 
                                 "SELECT ORGANIZATIONS.*\r\n" + 
"FROM ORGANIZATIONS\r\n" + 
                                 "WHERE \r\n" + 
                                 "        ORGANIZATIONS.ID_WALLET = ?IDWALLET "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idWallet);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Payments Code with a given identifier
     * @param id long Payments Code Identifier
     * @return PaymentsCodeDAO Payments Code Data Transfer Object
     */
    public PaymentsCodeDAO getPaymentsCode(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        PaymentsCodeDAO dao;
        // Build Query
        queryStr = "SELECT PAYMENTS_CODE.*\r\n " + 
			"FROM PAYMENTS_CODE\r\n     " + 
			"WHERE PAYMENTS_CODE.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new PaymentsCodeDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Payments Code
     * @param paymentCode String Payments Code Payment Code
     * @return PaymentsCodeDAO Payments Code Data Transfer Object
     */
    public PaymentsCodeDAO getPaymentsCodeFindByGetPaymentCode(String paymentCode) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        PaymentsCodeDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        PaymentsCodeDAO.GetPaymentCodeParameters parameters;
        // Create DTO
        dto =  new PaymentsCodeDAO(PaymentsCodeDAO.SearchType.GetPaymentCode);
        // Create Parameters
        parameters = dto.new GetPaymentCodeParameters(paymentCode);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("PAYMENTCODE", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_PaymentsCode_GetPaymentCode", 
                                 "SELECT * FROM PAYMENTS_CODE   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "	PAYMENT_CODE = ?PAYMENTCODE    \r\n " + 
                                 "	AND CODE_STATUS = 1"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, paymentCode);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Payments Code
     * @param idVolunteer long Payments Code Volunteer Identifier
     * @return PaymentsCodeDAO Payments Code Data Transfer Object
     */
    public PaymentsCodeDAO getPaymentsCodeFindByGetLatest(long idVolunteer) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        PaymentsCodeDAO dto;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        PaymentsCodeDAO.GetLatestParameters parameters;
        // Create DTO
        dto =  new PaymentsCodeDAO(PaymentsCodeDAO.SearchType.GetLatest);
        // Create Parameters
        parameters = dto.new GetLatestParameters(idVolunteer);
        // Set parameters
        dto.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDVOLUNTEER", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_PaymentsCode_GetLatest", 
                                 "SELECT * FROM PAYMENTS_CODE   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_VOLUNTEER = ?IDVOLUNTEER \r\n " + 
                                 "ORDER BY ID DESC      "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, idVolunteer);
        // Execute Query
        try {
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dto, queryStr);
            // Return DTO
            return dto;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Payments Request with a given identifier
     * @param id long Payments Request Identifier
     * @return PaymentsRequestsDAO Payments Request Data Transfer Object
     */
    public PaymentsRequestsDAO getPaymentsRequest(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        PaymentsRequestsDAO dao;
        // Build Query
        queryStr = "SELECT PAYMENTS_REQUESTS.*\r\n " + 
			"FROM PAYMENTS_REQUESTS\r\n     " + 
			"WHERE PAYMENTS_REQUESTS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new PaymentsRequestsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Shop Transactions Good with a given identifier
     * @param id long Shop Transactions Good Identifier
     * @return ShopTransactionsGoodsDAO Shop Transactions Good Data Transfer Object
     */
    public ShopTransactionsGoodsDAO getShopTransactionsGood(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        ShopTransactionsGoodsDAO dao;
        // Build Query
        queryStr = "SELECT SHOP_TRANSACTIONS_GOODS.*\r\n " + 
			"FROM SHOP_TRANSACTIONS_GOODS\r\n     " + 
			"WHERE SHOP_TRANSACTIONS_GOODS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new ShopTransactionsGoodsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Country with a given identifier
     * @param id long Country Identifier
     * @return CountriesDAO Country Data Transfer Object
     */
    public CountriesDAO getCountry(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        CountriesDAO dao;
        // Build Query
        queryStr = "SELECT COUNTRIES.*\r\n " + 
			"FROM COUNTRIES\r\n     " + 
			"WHERE COUNTRIES.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new CountriesDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a City with a given identifier
     * @param id long City Identifier
     * @return CitiesDAO City Data Transfer Object
     */
    public CitiesDAO getCity(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        CitiesDAO dao;
        // Build Query
        queryStr = "SELECT CITIES.*\r\n " + 
			"FROM CITIES\r\n     " + 
			"WHERE CITIES.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new CitiesDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Team with a given identifier
     * @param id long null
     * @param langCode String Team Identifier
     * @return TeamDAO Team Data Transfer Object
     */
    public TeamDAO getTeam(long id, String langCode) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        TeamDAO dao;
        // Build Query
        queryStr = "SELECT TEAM.*, \r\n " + 
			"       multilang_translations.SMALL_TEXT1 POSITION, \r\n " + 
			"       multilang_translations.MEDIUM_TEXT1 DESCRIPTION\r\n " + 
			"FROM TEAM\r\n " + 
			"LEFT JOIN `weezziserver`.`multilang_translations` ON (TEAM.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = \"" + langCode + "\")\r\n     " + 
			"WHERE TEAM.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new TeamDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id, langCode));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Sponsor with a given identifier
     * @param id long Sponsor Identifier
     * @return SponsorsDAO Sponsor Data Transfer Object
     */
    public SponsorsDAO getSponsor(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        SponsorsDAO dao;
        // Build Query
        queryStr = "SELECT SPONSORS.*\r\n " + 
			"FROM SPONSORS\r\n     " + 
			"WHERE SPONSORS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new SponsorsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Company with a given identifier
     * @param id long null
     * @param langCode String Company Identifier
     * @return CompaniesDAO Company Data Transfer Object
     */
    public CompaniesDAO getCompany(long id, String langCode) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        CompaniesDAO dao;
        // Build Query
        queryStr = "SELECT COMPANIES.*, \r\n " + 
			"       multilang_translations.MEDIUM_TEXT1 DESCRIPTION\r\n " + 
			"FROM COMPANIES\r\n " + 
			"LEFT JOIN `weezziserver`.`multilang_translations` ON (COMPANIES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = \"" + langCode + "\")\r\n     " + 
			"WHERE COMPANIES.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new CompaniesDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id, langCode));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Project with a given identifier
     * @param id long null
     * @param langCode String Project Identifier
     * @return ProjectsDAO Project Data Transfer Object
     */
    public ProjectsDAO getProject(long id, String langCode) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        ProjectsDAO dao;
        // Build Query
        queryStr = "SELECT PROJECTS.*, \r\n " + 
			"       multilang_translations.SMALL_TEXT1 NAME, \r\n " + 
			"       multilang_translations.MEDIUM_TEXT1 HEADLINE, \r\n " + 
			"       multilang_translations.LARGE_TEXT1 DESCRIPTION\r\n " + 
			"FROM PROJECTS\r\n " + 
			"LEFT JOIN `weezziserver`.`multilang_translations` ON (PROJECTS.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = \"" + langCode + "\")\r\n     " + 
			"WHERE PROJECTS.ID = " + id;
        // Execute Query
        try {
            // Create DAO
            dao =  new ProjectsDAO();
            // Set parameters
            dao.setParameters(new DAOInstantParameters(id, langCode));
            // Execute query and retrieve query DAO
            GlobalDBManager.getDAO(dao, queryStr);
            // Return DAO
            return dao;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    // SPECIAL QUERY GETTERS --------------------------------------------------


    /**
     * Gets a Wallet Record
     * @param id long Wallet Records Identifier
     * @return WalletRecordsDAO Wallet Record Data Transfer Object
     */
    public WalletRecordsGetBalanceSPQ getWalletRecordsFindByGetBalanceSPQ(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        WalletRecordsGetBalanceSPQ spq;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        WalletRecordsGetBalanceSPQ.Parameters parameters;
        // Create SPQ
        spq =  new WalletRecordsGetBalanceSPQ();
        // Create Parameters
        parameters = spq.new Parameters(id);
        // Set parameters
        spq.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("ID", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "WalletRecords_GetBalance_null", 
                                 "SELECT SUM(TRANSACTION_VALUE) BALANCE FROM WALLET_RECORDS \r\n " + 
                                 "WHERE ID_WALLET = ?ID"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, id);
        // Execute Query
        try {
            // Execute query and retrieve query DTO
            GlobalDBManager.getDAO(spq, queryStr);
            // Return SPQ
            return spq;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }




    /**
     * Gets a Wallet Record
     * @return BulkWalletRecordsTotalsSPQ Wallet Record Data Transfer Object
     */
    public BulkWalletRecordsTotalsSPQ getWalletRecordsFindByTotalsSPQ() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        BulkWalletRecordsTotalsSPQ bulkSPQ;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create Bulk SPQ
        bulkSPQ =  new BulkWalletRecordsTotalsSPQ();
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "WalletRecords_Totals_null", 
                                 "SELECT WALLET_TYPE, SUM(TRANSACTION_VALUE) TOTAL_VALUE  FROM merits.WALLET_RECORDS \r\n " + 
                                 "GROUP BY WALLET_TYPE"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve query Bulk SPQ
            GlobalDBManager.fillBulkDAO(bulkSPQ, queryStr);
            // Return DAO
            return bulkSPQ;
        } catch(NoDataFoundException ex) {
            return bulkSPQ;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }


    /**
     * Gets a Wallet Record
     * @param id long Wallet Records Identifier
     * @return WalletRecordsDAO Wallet Record Data Transfer Object
     */
    public WalletRecordsMasterWalletSPQ getWalletRecordsFindByMasterWalletSPQ(long id) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        WalletRecordsMasterWalletSPQ spq;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        WalletRecordsMasterWalletSPQ.Parameters parameters;
        // Create SPQ
        spq =  new WalletRecordsMasterWalletSPQ();
        // Create Parameters
        parameters = spq.new Parameters(id);
        // Set parameters
        spq.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("ID", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "WalletRecords_MasterWallet_null", 
                                 "SELECT CREATES.V CREATES, REDEEMS.V REDEEMS, BURNS.V BURNS \r\n " + 
                                 "FROM (SELECT SUM(TRANSACTION_VALUE) V FROM WALLET_RECORDS WHERE ID_WALLET = ?ID AND OPERATION = 3) AS CREATES, \r\n " + 
                                 "(SELECT SUM(TRANSACTION_VALUE) V FROM WALLET_RECORDS WHERE ID_WALLET = ?ID AND OPERATION = 2) AS REDEEMS, \r\n " + 
                                 "(SELECT SUM(-1*TRANSACTION_VALUE) V FROM WALLET_RECORDS WHERE ID_WALLET = ?ID AND OPERATION = 5) AS BURNS"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, id);
        // Execute Query
        try {
            // Execute query and retrieve query DTO
            GlobalDBManager.getDAO(spq, queryStr);
            // Return SPQ
            return spq;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }








    /**
     * Gets a Volunteer
     * @return BulkVolunteersGetAllUsersSPQ Volunteer Data Transfer Object
     */
    public BulkVolunteersGetAllUsersSPQ getVolunteersFindByGetAllUsersSPQ() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        BulkVolunteersGetAllUsersSPQ bulkSPQ;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create Bulk SPQ
        bulkSPQ =  new BulkVolunteersGetAllUsersSPQ();
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Volunteers_GetAllUsers_null", 
                                 ""));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve query Bulk SPQ
            GlobalDBManager.fillBulkDAO(bulkSPQ, queryStr);
            // Return DAO
            return bulkSPQ;
        } catch(NoDataFoundException ex) {
            return bulkSPQ;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }




    /**
     * Gets a Volunteer
     * @param search String Volunteers Search
     * @return BulkVolunteersUsersSPQ Volunteer Data Transfer Object
     */
    public BulkVolunteersUsersSPQ getVolunteersFindByUsersSPQ(String search) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        BulkVolunteersUsersSPQ bulkSPQ;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkVolunteersUsersSPQ.Parameters parameters;
        // Create Bulk SPQ
        bulkSPQ =  new BulkVolunteersUsersSPQ();
        // Create Parameters
        parameters = bulkSPQ.new Parameters(search);
        // Set parameters
        bulkSPQ.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Volunteers_Users_null", 
                                 "SELECT ID, PHOTO, NULL SHOP, FIRST_NAME, LAST_NAME, 1 AS TYPE FROM VOLUNTEERS \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "WHERE LOWER(FIRST_NAME) LIKE '%?@SEARCH%' OR LOWER(LAST_NAME) LIKE '%?@SEARCH%' \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "UNION \r\n " + 
                                 "SELECT ID, PHOTO, NAME SHOP, NULL FIRST_NAME, NULL LAST_NAME, 2 AS TYPE FROM SHOPS \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "WHERE LOWER(NAME) LIKE '%?@SEARCH%' \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "UNION \r\n " + 
                                 "SELECT SHOP_CASHIERS.ID, PHOTO, NAME SHOP, FIRST_NAME,  LAST_NAME, 3 AS TYPE FROM SHOP_CASHIERS, SHOPS \r\n " + 
                                 "WHERE SHOPS.ID = SHOP_CASHIERS.ID_SHOP \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "AND LOWER(SHOPS.NAME) LIKE '%?@SEARCH%'OR LOWER(FIRST_NAME) LIKE '%?@SEARCH%' OR LOWER(LAST_NAME) LIKE '%?@SEARCH%' \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY SHOP, FIRST_NAME, LAST_NAME \r\n " + 
                                 ""));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery(parameterNames, search);
        // Execute Query
        try {
            // Execute query and retrieve query Bulk SPQ
            GlobalDBManager.fillBulkDAO(bulkSPQ, queryStr);
            // Return DAO
            return bulkSPQ;
        } catch(NoDataFoundException ex) {
            return bulkSPQ;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }










    /**
     * Gets a Shop Goodtype
     * @param shopId long Shop Goodtypes Shop Id
     * @param langCode String Shop Goodtypes Lang Code
     * @return BulkShopGoodtypesShopGoodSPQ Shop Goodtype Data Transfer Object
     */
    public BulkShopGoodtypesShopGoodSPQ getShopGoodtypesFindByShopGoodSPQ(long shopId, String langCode) throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        BulkShopGoodtypesShopGoodSPQ bulkSPQ;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopGoodtypesShopGoodSPQ.Parameters parameters;
        // Create Bulk SPQ
        bulkSPQ =  new BulkShopGoodtypesShopGoodSPQ();
        // Create Parameters
        parameters = bulkSPQ.new Parameters(shopId, langCode);
        // Set parameters
        bulkSPQ.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SHOPID", 1);
        parameterNames.put("LANGCODE", 2);
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "ShopGoodtypes_ShopGood_null", 
                                 "SELECT GOOD_TYPES.*,   \r\n " + 
                                 "       multilang_translations.SMALL_TEXT1 NAME  \r\n " + 
                                 "FROM SHOP_GOODTYPES, GOOD_TYPES  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (GOOD_TYPES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "WHERE  \r\n " + 
                                 "SHOP_GOODTYPES.ID_SHOP = ?SHOPID AND \r\n " + 
                                 "SHOP_GOODTYPES.ID_GOODTYPE = GOOD_TYPES.ID  \r\n " + 
                                 " \r\n " + 
                                 "ORDER BY  \r\n " + 
                                 "	ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Sets Language Code
        query.setLangCode(langCode);
        // Create Query String
        queryStr = query.getQuery(parameterNames, shopId, langCode);
        // Execute Query
        try {
            // Execute query and retrieve query Bulk SPQ
            GlobalDBManager.fillBulkDAO(bulkSPQ, queryStr);
            // Return DAO
            return bulkSPQ;
        } catch(NoDataFoundException ex) {
            return bulkSPQ;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }
























    // BULK GETTERS -----------------------------------------------------------


    /**
     * Gets all Wallet Records
     * @param bulkDAO BulkWalletRecordsDAO Wallet Records Bulk DAO
     * @return BulkWalletRecordsDAO Wallet Records Bulk DAO with all query values
     */
    public BulkWalletRecordsDAO getWalletRecordsFindByTransactions(long idWallet) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkWalletRecordsDAO bulkDAO = new BulkWalletRecordsDAO(BulkWalletRecordsDAO.SearchType.Transactions);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkWalletRecordsDAO.TransactionsParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new TransactionsParameters(idWallet, null);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDWALLET", 1);
        parameterNames.put("SINCEID", 2);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_Transactions", 
                                 "SELECT * FROM WALLET_RECORDS   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_WALLET = ?IDWALLET  \r\n " + 
                                 "{IF#SINCEID# \r\n " + 
                                 "        AND ID > ?SINCEID       \r\n " + 
                                 "} \r\n " + 
                                 "ORDER BY ID DESC"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idWallet, null);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Wallet Records
     * @param bulkDAO BulkWalletRecordsDAO Wallet Records Bulk DAO
     * @return BulkWalletRecordsDAO Wallet Records Bulk DAO with all query values
     */
    public BulkWalletRecordsDAO getWalletRecordsFindByTransactions(long idWallet, Long sinceId) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkWalletRecordsDAO bulkDAO = new BulkWalletRecordsDAO(BulkWalletRecordsDAO.SearchType.Transactions);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkWalletRecordsDAO.TransactionsParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new TransactionsParameters(idWallet, sinceId);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDWALLET", 1);
        parameterNames.put("SINCEID", 2);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_Transactions", 
                                 "SELECT * FROM WALLET_RECORDS   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_WALLET = ?IDWALLET  \r\n " + 
                                 "{IF#SINCEID# \r\n " + 
                                 "        AND ID > ?SINCEID       \r\n " + 
                                 "} \r\n " + 
                                 "ORDER BY ID DESC"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idWallet, sinceId);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Wallet Records
     * @param bulkDAO BulkWalletRecordsDAO Wallet Records Bulk DAO
     * @return BulkWalletRecordsDAO Wallet Records Bulk DAO with all query values
     */
    public BulkWalletRecordsDAO getWalletRecordsFindByAll() throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkWalletRecordsDAO bulkDAO = new BulkWalletRecordsDAO(BulkWalletRecordsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkWalletRecordsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(null, null, null, null, null);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDVOLUNTEER", 1);
        parameterNames.put("IDSHOP", 2);
        parameterNames.put("SEARCH", 3);
        parameterNames.put("STARTDATE", 4);
        parameterNames.put("ENDDATE", 5);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_All", 
                                 "SELECT *  \r\n " + 
                                 "FROM WALLET_RECORDS       \r\n " + 
                                 "WHERE 1=1 \r\n " + 
                                 "{IF#IDVOLUNTEER} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER \r\n " + 
                                 "	      ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER  \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#IDSHOP} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#STARTDATE} \r\n " + 
                                 "  and 	TRANSACTION_DATE >= STR_TO_DATE('?@STARTDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#ENDDATE} \r\n " + 
                                 "  AND 	TRANSACTION_DATE < STR_TO_DATE('?@ENDDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ID DESC"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Wallet Records
     * @param bulkDAO BulkWalletRecordsDAO Wallet Records Bulk DAO
     * @return BulkWalletRecordsDAO Wallet Records Bulk DAO with all query values
     */
    public BulkWalletRecordsDAO getWalletRecordsFindByAll(Long idVolunteer, Long idShop, String search, String startDate, String endDate) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkWalletRecordsDAO bulkDAO = new BulkWalletRecordsDAO(BulkWalletRecordsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkWalletRecordsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(idVolunteer, idShop, search, startDate, endDate);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDVOLUNTEER", 1);
        parameterNames.put("IDSHOP", 2);
        parameterNames.put("SEARCH", 3);
        parameterNames.put("STARTDATE", 4);
        parameterNames.put("ENDDATE", 5);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_All", 
                                 "SELECT *  \r\n " + 
                                 "FROM WALLET_RECORDS       \r\n " + 
                                 "WHERE 1=1 \r\n " + 
                                 "{IF#IDVOLUNTEER} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER \r\n " + 
                                 "	      ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER  \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#IDSHOP} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#STARTDATE} \r\n " + 
                                 "  and 	TRANSACTION_DATE >= STR_TO_DATE('?@STARTDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#ENDDATE} \r\n " + 
                                 "  AND 	TRANSACTION_DATE < STR_TO_DATE('?@ENDDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ID DESC"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idVolunteer, idShop, search, startDate, endDate);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Wallet Records
     * @param bulkDAO BulkWalletRecordsDAO Wallet Records Bulk DAO
     * @return BulkWalletRecordsDAO Wallet Records Bulk DAO with all query values
     */
    public BulkWalletRecordsDAO getWalletRecordsBlockFindByAll(int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkWalletRecordsDAO bulkDAO = new BulkWalletRecordsDAO(BulkWalletRecordsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkWalletRecordsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(null, null, null, null, null);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDVOLUNTEER", 1);
        parameterNames.put("IDSHOP", 2);
        parameterNames.put("SEARCH", 3);
        parameterNames.put("STARTDATE", 4);
        parameterNames.put("ENDDATE", 5);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_All", 
                                 "SELECT *  \r\n " + 
                                 "FROM WALLET_RECORDS       \r\n " + 
                                 "WHERE 1=1 \r\n " + 
                                 "{IF#IDVOLUNTEER} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER \r\n " + 
                                 "	      ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER  \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#IDSHOP} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#STARTDATE} \r\n " + 
                                 "  and 	TRANSACTION_DATE >= STR_TO_DATE('?@STARTDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#ENDDATE} \r\n " + 
                                 "  AND 	TRANSACTION_DATE < STR_TO_DATE('?@ENDDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ID DESC"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Wallet Records
     * @param bulkDAO BulkWalletRecordsDAO Wallet Records Bulk DAO
     * @return BulkWalletRecordsDAO Wallet Records Bulk DAO with all query values
     */
    public BulkWalletRecordsDAO getWalletRecordsBlockFindByAll(Long idVolunteer, Long idShop, String search, String startDate, String endDate, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkWalletRecordsDAO bulkDAO = new BulkWalletRecordsDAO(BulkWalletRecordsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkWalletRecordsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(idVolunteer, idShop, search, startDate, endDate);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDVOLUNTEER", 1);
        parameterNames.put("IDSHOP", 2);
        parameterNames.put("SEARCH", 3);
        parameterNames.put("STARTDATE", 4);
        parameterNames.put("ENDDATE", 5);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_WalletRecords_All", 
                                 "SELECT *  \r\n " + 
                                 "FROM WALLET_RECORDS       \r\n " + 
                                 "WHERE 1=1 \r\n " + 
                                 "{IF#IDVOLUNTEER} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER \r\n " + 
                                 "	      ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and volunteers.id =  ?IDVOLUNTEER  \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#IDSHOP} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and shops.id = ?IDSHOP \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "  and ( \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 4  \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from volunteers  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = volunteers.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(volunteers.first_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	          or lower(volunteers.last_name) like lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ID_WALLET = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "    or  \r\n " + 
                                 "    ( \r\n " + 
                                 "	    ref_wallet_type = 5 \r\n " + 
                                 "	    and exists ( \r\n " + 
                                 "	      select 1 from shops  \r\n " + 
                                 "	      where WALLET_RECORDS.ref_wallet = shops.ID_WALLET  \r\n " + 
                                 "	        and ( \r\n " + 
                                 "	          lower(shops.name) LIKE lower('%?@SEARCH%') \r\n " + 
                                 "	        ) \r\n " + 
                                 "	    ) \r\n " + 
                                 "    ) \r\n " + 
                                 "  ) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#STARTDATE} \r\n " + 
                                 "  and 	TRANSACTION_DATE >= STR_TO_DATE('?@STARTDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "{IF#ENDDATE} \r\n " + 
                                 "  AND 	TRANSACTION_DATE < STR_TO_DATE('?@ENDDATE', '%Y-%m-%d %T') \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ID DESC"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idVolunteer, idShop, search, startDate, endDate);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Good Types
     * @param bulkDAO BulkGoodTypesDAO Good Types Bulk DAO
     * @return BulkGoodTypesDAO Good Types Bulk DAO with all query values
     */
    public BulkGoodTypesDAO getGoodTypesFindByAll(String langCode) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkGoodTypesDAO bulkDAO = new BulkGoodTypesDAO(BulkGoodTypesDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkGoodTypesDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(langCode);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LANGCODE", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_GoodTypes_All", 
                                 "SELECT GOOD_TYPES.*,   \r\n " + 
                                 "       multilang_translations.SMALL_TEXT1 NAME  \r\n " + 
                                 "FROM GOOD_TYPES  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (GOOD_TYPES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "ORDER BY  \r\n " + 
                                 "	ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, langCode);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Volunteers
     * @param bulkDAO BulkVolunteersDAO Volunteers Bulk DAO
     * @return BulkVolunteersDAO Volunteers Bulk DAO with all query values
     */
    public BulkVolunteersDAO getVolunteersFindByAll(String search) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkVolunteersDAO bulkDAO = new BulkVolunteersDAO(BulkVolunteersDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkVolunteersDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Volunteers_All", 
                                 "SELECT * FROM VOLUNTEERS  "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Volunteers
     * @param bulkDAO BulkVolunteersDAO Volunteers Bulk DAO
     * @return BulkVolunteersDAO Volunteers Bulk DAO with all query values
     */
    public BulkVolunteersDAO getVolunteersBlockFindByAll(String search, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkVolunteersDAO bulkDAO = new BulkVolunteersDAO(BulkVolunteersDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkVolunteersDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Volunteers_All", 
                                 "SELECT * FROM VOLUNTEERS  "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Shops
     * @param bulkDAO BulkShopsDAO Shops Bulk DAO
     * @return BulkShopsDAO Shops Bulk DAO with all query values
     */
    public BulkShopsDAO getShopsFindByGetAll() throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopsDAO bulkDAO = new BulkShopsDAO(BulkShopsDAO.SearchType.GetAll);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopsDAO.GetAllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new GetAllParameters(null);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Shops_GetAll", 
                                 "SELECT * FROM SHOPS   \r\n " + 
                                 "ORDER BY NAME \r\n " + 
                                 ""));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Shops
     * @param bulkDAO BulkShopsDAO Shops Bulk DAO
     * @return BulkShopsDAO Shops Bulk DAO with all query values
     */
    public BulkShopsDAO getShopsFindByGetAll(String search) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopsDAO bulkDAO = new BulkShopsDAO(BulkShopsDAO.SearchType.GetAll);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopsDAO.GetAllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new GetAllParameters(search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Shops_GetAll", 
                                 "SELECT * FROM SHOPS   \r\n " + 
                                 "ORDER BY NAME \r\n " + 
                                 ""));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Shops
     * @param bulkDAO BulkShopsDAO Shops Bulk DAO
     * @return BulkShopsDAO Shops Bulk DAO with all query values
     */
    public BulkShopsDAO getShopsBlockFindByGetAll(int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopsDAO bulkDAO = new BulkShopsDAO(BulkShopsDAO.SearchType.GetAll);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopsDAO.GetAllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new GetAllParameters(null);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Shops_GetAll", 
                                 "SELECT * FROM SHOPS   \r\n " + 
                                 "ORDER BY NAME \r\n " + 
                                 ""));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Shops
     * @param bulkDAO BulkShopsDAO Shops Bulk DAO
     * @return BulkShopsDAO Shops Bulk DAO with all query values
     */
    public BulkShopsDAO getShopsBlockFindByGetAll(String search, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopsDAO bulkDAO = new BulkShopsDAO(BulkShopsDAO.SearchType.GetAll);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopsDAO.GetAllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new GetAllParameters(search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Shops_GetAll", 
                                 "SELECT * FROM SHOPS   \r\n " + 
                                 "ORDER BY NAME \r\n " + 
                                 ""));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Shop Cashiers
     * @param bulkDAO BulkShopCashiersDAO Shop Cashiers Bulk DAO
     * @return BulkShopCashiersDAO Shop Cashiers Bulk DAO with all query values
     */
    public BulkShopCashiersDAO getShopCashiersFindByAll(long idShop) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopCashiersDAO bulkDAO = new BulkShopCashiersDAO(BulkShopCashiersDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopCashiersDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(idShop);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopCashiers_All", 
                                 "SELECT * FROM SHOP_CASHIERS  \r\n " + 
                                 "WHERE ID_SHOP = ?IDSHOP \r\n " + 
                                 "ORDER BY FIRST_NAME, LAST_NAME     "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idShop);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Shop Goodtypes
     * @param bulkDAO BulkShopGoodtypesDAO Shop Goodtypes Bulk DAO
     * @return BulkShopGoodtypesDAO Shop Goodtypes Bulk DAO with all query values
     */
    public BulkShopGoodtypesDAO getShopGoodtypesFindByGoodTypes(long idShop) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopGoodtypesDAO bulkDAO = new BulkShopGoodtypesDAO(BulkShopGoodtypesDAO.SearchType.GoodTypes);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopGoodtypesDAO.GoodTypesParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new GoodTypesParameters(idShop);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopGoodtypes_GoodTypes", 
                                 "SELECT SHOP_GOODTYPES.*\r\n" + 
"FROM SHOP_GOODTYPES\r\n" + 
                                 "WHERE \r\n" + 
                                 "        SHOP_GOODTYPES.ID_SHOP = ?IDSHOP "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idShop);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Shop Transactions
     * @param bulkDAO BulkShopTransactionsDAO Shop Transactions Bulk DAO
     * @return BulkShopTransactionsDAO Shop Transactions Bulk DAO with all query values
     */
    public BulkShopTransactionsDAO getShopTransactionsFindByShop(long idShop) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopTransactionsDAO bulkDAO = new BulkShopTransactionsDAO(BulkShopTransactionsDAO.SearchType.Shop);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopTransactionsDAO.ShopParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new ShopParameters(idShop);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopTransactions_Shop", 
                                 "SELECT * FROM SHOP_TRANSACTIONS   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_SHOP = ?IDSHOP    \r\n " + 
                                 "ORDER BY ID DESC   "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idShop);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Shop Transactions
     * @param bulkDAO BulkShopTransactionsDAO Shop Transactions Bulk DAO
     * @return BulkShopTransactionsDAO Shop Transactions Bulk DAO with all query values
     */
    public BulkShopTransactionsDAO getShopTransactionsBlockFindByShop(long idShop, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopTransactionsDAO bulkDAO = new BulkShopTransactionsDAO(BulkShopTransactionsDAO.SearchType.Shop);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopTransactionsDAO.ShopParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new ShopParameters(idShop);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopTransactions_Shop", 
                                 "SELECT * FROM SHOP_TRANSACTIONS   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_SHOP = ?IDSHOP    \r\n " + 
                                 "ORDER BY ID DESC   "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idShop);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Shop Transactions
     * @param bulkDAO BulkShopTransactionsDAO Shop Transactions Bulk DAO
     * @return BulkShopTransactionsDAO Shop Transactions Bulk DAO with all query values
     */
    public BulkShopTransactionsDAO getShopTransactionsFindByShopCashier(long idShop, long idCashier) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopTransactionsDAO bulkDAO = new BulkShopTransactionsDAO(BulkShopTransactionsDAO.SearchType.ShopCashier);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopTransactionsDAO.ShopCashierParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new ShopCashierParameters(idShop, idCashier);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        parameterNames.put("IDCASHIER", 2);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopTransactions_ShopCashier", 
                                 "SELECT * FROM SHOP_TRANSACTIONS   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_SHOP = ?IDSHOP    \r\n " + 
                                 "        AND ID_CASHIER = ?IDCASHIER    \r\n " + 
                                 "ORDER BY ID DESC   "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idShop, idCashier);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Shop Transactions
     * @param bulkDAO BulkShopTransactionsDAO Shop Transactions Bulk DAO
     * @return BulkShopTransactionsDAO Shop Transactions Bulk DAO with all query values
     */
    public BulkShopTransactionsDAO getShopTransactionsBlockFindByShopCashier(long idShop, long idCashier, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkShopTransactionsDAO bulkDAO = new BulkShopTransactionsDAO(BulkShopTransactionsDAO.SearchType.ShopCashier);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkShopTransactionsDAO.ShopCashierParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new ShopCashierParameters(idShop, idCashier);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDSHOP", 1);
        parameterNames.put("IDCASHIER", 2);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_ShopTransactions_ShopCashier", 
                                 "SELECT * FROM SHOP_TRANSACTIONS   \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        ID_SHOP = ?IDSHOP    \r\n " + 
                                 "        AND ID_CASHIER = ?IDCASHIER    \r\n " + 
                                 "ORDER BY ID DESC   "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idShop, idCashier);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Organizations
     * @param bulkDAO BulkOrganizationsDAO Organizations Bulk DAO
     * @return BulkOrganizationsDAO Organizations Bulk DAO with all query values
     */
    public BulkOrganizationsDAO getOrganizationsFindByAll() throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkOrganizationsDAO bulkDAO = new BulkOrganizationsDAO(BulkOrganizationsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Organizations_All", 
                                 "SELECT * FROM ORGANIZATIONS \r\n " + 
                                 "ORDER BY NAME      "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Countries
     * @param bulkDAO BulkCountriesDAO Countries Bulk DAO
     * @return BulkCountriesDAO Countries Bulk DAO with all query values
     */
    public BulkCountriesDAO getCountriesFindByAll() throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkCountriesDAO bulkDAO = new BulkCountriesDAO(BulkCountriesDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Countries_All", 
                                 "SELECT COUNTRIES.*  \r\n " + 
                                 "FROM COUNTRIES \r\n " + 
                                 "ORDER BY lower(NAME)     "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Cities
     * @param bulkDAO BulkCitiesDAO Cities Bulk DAO
     * @return BulkCitiesDAO Cities Bulk DAO with all query values
     */
    public BulkCitiesDAO getCitiesFindByAll(long idCountry) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkCitiesDAO bulkDAO = new BulkCitiesDAO(BulkCitiesDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkCitiesDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(idCountry);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("IDCOUNTRY", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Cities_All", 
                                 "SELECT CITIES.*\r\n" + 
"FROM CITIES\r\n" + 
                                 "WHERE \r\n" + 
                                 "        CITIES.ID_COUNTRY = ?IDCOUNTRY "     ));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, idCountry);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Team
     * @param bulkDAO BulkTeamDAO Team Bulk DAO
     * @return BulkTeamDAO Team Bulk DAO with all query values
     */
    public BulkTeamDAO getTeamFindByAll(String langCode) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkTeamDAO bulkDAO = new BulkTeamDAO(BulkTeamDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkTeamDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(langCode);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LANGCODE", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Team_All", 
                                 "SELECT TEAM.*,   \r\n " + 
                                 "       multilang_translations.SMALL_TEXT1 POSITION,   \r\n " + 
                                 "       multilang_translations.MEDIUM_TEXT1 DESCRIPTION  \r\n " + 
                                 "FROM TEAM  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (TEAM.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "ORDER BY ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, langCode);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Sponsors
     * @param bulkDAO BulkSponsorsDAO Sponsors Bulk DAO
     * @return BulkSponsorsDAO Sponsors Bulk DAO with all query values
     */
    public BulkSponsorsDAO getSponsorsFindByAll(String search) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkSponsorsDAO bulkDAO = new BulkSponsorsDAO(BulkSponsorsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkSponsorsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Sponsors_All", 
                                 "SELECT SPONSORS.*  \r\n " + 
                                 "FROM SPONSORS  \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        lower(SPONSORS.NAME) like lower(?$SEARCH) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Sponsors
     * @param bulkDAO BulkSponsorsDAO Sponsors Bulk DAO
     * @return BulkSponsorsDAO Sponsors Bulk DAO with all query values
     */
    public BulkSponsorsDAO getSponsorsBlockFindByAll(String search, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkSponsorsDAO bulkDAO = new BulkSponsorsDAO(BulkSponsorsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkSponsorsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("SEARCH", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Sponsors_All", 
                                 "SELECT SPONSORS.*  \r\n " + 
                                 "FROM SPONSORS  \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        lower(SPONSORS.NAME) like lower(?$SEARCH) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Companies
     * @param bulkDAO BulkCompaniesDAO Companies Bulk DAO
     * @return BulkCompaniesDAO Companies Bulk DAO with all query values
     */
    public BulkCompaniesDAO getCompaniesFindByAll(String langCode, String search) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkCompaniesDAO bulkDAO = new BulkCompaniesDAO(BulkCompaniesDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkCompaniesDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(langCode, search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LANGCODE", 1);
        parameterNames.put("SEARCH", 2);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Companies_All", 
                                 "SELECT COMPANIES.*,   \r\n " + 
                                 "       multilang_translations.MEDIUM_TEXT1 DESCRIPTION  \r\n " + 
                                 "FROM COMPANIES  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (COMPANIES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        lower(COMPANIES.NAME) like lower(?$SEARCH) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, langCode, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Companies
     * @param bulkDAO BulkCompaniesDAO Companies Bulk DAO
     * @return BulkCompaniesDAO Companies Bulk DAO with all query values
     */
    public BulkCompaniesDAO getCompaniesBlockFindByAll(String langCode, String search, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkCompaniesDAO bulkDAO = new BulkCompaniesDAO(BulkCompaniesDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkCompaniesDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(langCode, search);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LANGCODE", 1);
        parameterNames.put("SEARCH", 2);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Companies_All", 
                                 "SELECT COMPANIES.*,   \r\n " + 
                                 "       multilang_translations.MEDIUM_TEXT1 DESCRIPTION  \r\n " + 
                                 "FROM COMPANIES  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (COMPANIES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "{IF#SEARCH} \r\n " + 
                                 "WHERE   \r\n " + 
                                 "        lower(COMPANIES.NAME) like lower(?$SEARCH) \r\n " + 
                                 "{ENDIF#} \r\n " + 
                                 "ORDER BY ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, langCode, search);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }




    /**
     * Gets all Projects
     * @param bulkDAO BulkProjectsDAO Projects Bulk DAO
     * @return BulkProjectsDAO Projects Bulk DAO with all query values
     */
    public BulkProjectsDAO getProjectsFindByAll(String langCode) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkProjectsDAO bulkDAO = new BulkProjectsDAO(BulkProjectsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkProjectsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(langCode);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LANGCODE", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Projects_All", 
                                 "SELECT PROJECTS.*,   \r\n " + 
                                 "       multilang_translations.SMALL_TEXT1 NAME,   \r\n " + 
                                 "       multilang_translations.MEDIUM_TEXT1 HEADLINE,   \r\n " + 
                                 "       multilang_translations.LARGE_TEXT1 DESCRIPTION  \r\n " + 
                                 "FROM PROJECTS  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (PROJECTS.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "ORDER BY ORDER_NUMBER   "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, langCode);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    /**
     * Gets all Projects
     * @param bulkDAO BulkProjectsDAO Projects Bulk DAO
     * @return BulkProjectsDAO Projects Bulk DAO with all query values
     */
    public BulkProjectsDAO getProjectsBlockFindByAll(String langCode, int start, int end) throws Exception {
        // Local Variables
        QueryBuilder query;
        String queryStr = null;
        BulkProjectsDAO bulkDAO = new BulkProjectsDAO(BulkProjectsDAO.SearchType.All);
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        BulkProjectsDAO.AllParameters parameters;
        // Create Parameters
        parameters = bulkDAO.new AllParameters(langCode);
        // Set parameters
        bulkDAO.setParameters(parameters);
        // Create Parameters Map
        parameterNames.put("LANGCODE", 1);
        // Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "Base_Projects_All", 
                                 "SELECT PROJECTS.*,   \r\n " + 
                                 "       multilang_translations.SMALL_TEXT1 NAME,   \r\n " + 
                                 "       multilang_translations.MEDIUM_TEXT1 HEADLINE,   \r\n " + 
                                 "       multilang_translations.LARGE_TEXT1 DESCRIPTION  \r\n " + 
                                 "FROM PROJECTS  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (PROJECTS.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = ?LANGCODE)  \r\n " + 
                                 "ORDER BY ORDER_NUMBER   "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        bulkDAO.setBlockData(start, end-start);
        // Fill Bulk DAO with query results
        try {
            // Create Query String
            queryStr = query.getQuery(parameterNames, langCode);
            // Execute query and retrieve query results to Bulk DAO
            GlobalDBManager.fillBulkDAO(bulkDAO, queryStr);
        } catch(Exception ex) {
            // Error catched
            throw ex;
        }
        // Return DTO
        return bulkDAO;
    }


    // =========================================================================
    // LIST METHODS 
    // =========================================================================
    // GoodTypes -------------------------------------------------------


    /**
     * Gets a Good Type
     * @return GoodTypesDAO Good Type List
     */
    public GoodTypesListGoodTypes getGoodTypesListGoodTypes() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        GoodTypesListGoodTypes list;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create LIST
        list =  new GoodTypesListGoodTypes();
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "GoodTypesListGoodTypes", 
                                 "SELECT GOOD_TYPES.ID VALUE,   \r\n " + 
                                 "       multilang_translations.SMALL_TEXT1 NAME  \r\n " + 
                                 "FROM GOOD_TYPES  \r\n " + 
                                 "LEFT JOIN `weezziserver`.`multilang_translations` ON (GOOD_TYPES.MLK_ID = `weezziserver`.`multilang_translations`.ID_MLK AND `weezziserver`.`multilang_translations`.LANG_CODE = 'en')  \r\n " + 
                                 "ORDER BY  \r\n " + 
                                 "	ORDER_NUMBER"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve list query
            GlobalDBManager.fillList(list, queryStr);
            // Return List
            return list;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }
    // Volunteers -------------------------------------------------------


    /**
     * Gets a Volunteer
     * @return VolunteersDAO Volunteer List
     */
    public VolunteersListVolunteers getVolunteersListVolunteers() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        VolunteersListVolunteers list;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create LIST
        list =  new VolunteersListVolunteers();
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "VolunteersListVolunteers", 
                                 "SELECT VOLUNTEERS.ID VALUE,   \r\n " + 
                                 "	concat(FIRST_NAME, ' ', LAST_NAME) NAME  \r\n " + 
                                 "FROM VOLUNTEERS  \r\n " + 
                                 "ORDER BY  \r\n " + 
                                 "	FIRST_NAME, LAST_NAME"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve list query
            GlobalDBManager.fillList(list, queryStr);
            // Return List
            return list;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }
    // Shops -------------------------------------------------------


    /**
     * Gets a Shop
     * @return ShopsDAO Shop List
     */
    public ShopsListShops getShopsListShops() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        ShopsListShops list;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create LIST
        list =  new ShopsListShops();
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "ShopsListShops", 
                                 "SELECT SHOPS.ID VALUE, NAME  \r\n " + 
                                 "FROM SHOPS  \r\n " + 
                                 "ORDER BY NAME"));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve list query
            GlobalDBManager.fillList(list, queryStr);
            // Return List
            return list;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }
    // Organizations -------------------------------------------------------


    /**
     * Gets a Organization
     * @return OrganizationsDAO Organization List
     */
    public OrganizationsListOrganizations getOrganizationsListOrganizations() throws NoDataFoundException, Exception {
        // Local Variables
        String queryStr;
        QueryBuilder query;
        OrganizationsListOrganizations list;
        HashMap<String, Integer> parameterNames = new HashMap<String, Integer>();
        // Create LIST
        list =  new OrganizationsListOrganizations();
        // Build Query
        query = new QueryBuilder(QueriesUpdaterContainer.getQuery(siteId, "OrganizationsListOrganizations", 
                                 "SELECT ID VALUE, NAME FROM ORGANIZATIONS \r\n " + 
                                 "ORDER BY NAME      "));
        query.setDatabaseType(DatabaseType.MySQL);
        query.setTreatEnumsAsIntegers(true);
        // Create Query String
        queryStr = query.getQuery();
        // Execute Query
        try {
            // Execute query and retrieve list query
            GlobalDBManager.fillList(list, queryStr);
            // Return List
            return list;
        } catch(NoDataFoundException ex) {
            return null;
        } catch(Exception ex) {
            // Throw Exception
            throw ex;
        }
    }

    // =========================================================================
    // TREE METHODS 
    // =========================================================================
    // GoodTypes -------------------------------------------------------


    // Volunteers -------------------------------------------------------


    // Shops -------------------------------------------------------


    // Organizations -------------------------------------------------------



 
}
